"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _d3Cloud = _interopRequireDefault(require("d3-cloud"));

var _react = _interopRequireWildcard(require("react"));

var _d3Selection = require("d3-selection");

var _uuid = require("uuid");

var _defaultMappers = require("./defaultMappers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var WordCloud = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  WordCloud.propTypes = {
    data: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      text: _propTypes["default"].string.isRequired,
      value: _propTypes["default"].number.isRequired
    })).isRequired,
    font: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
    fontSizeMapper: _propTypes["default"].func,
    height: _propTypes["default"].number,
    padding: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),
    rotate: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),
    width: _propTypes["default"].number,
    onWordClick: _propTypes["default"].func,
    onWordMouseOut: _propTypes["default"].func,
    onWordMouseOver: _propTypes["default"].func,
    defaultColor: _propTypes["default"].string,
    formatImgDownload: _propTypes["default"].string
  };
  var svgRef = (0, _react.useRef)();
  var className = "word-cloud-text-chart".concat((0, _uuid.v4)());
  var defaultProps = {
    width: 700,
    height: 600,
    padding: 5,
    font: "serif",
    fontSizeMapper: _defaultMappers.defaultFontSizeMapper,
    rotate: 0,
    onWordClick: null,
    onWordMouseOver: null,
    onWordMouseOut: null,
    formatImgDownload: "png",
    defaultColor: "#333"
  };
  var data = props.data,
      width = props.width,
      height = props.height,
      padding = props.padding,
      font = props.font,
      fontSizeMapper = props.fontSizeMapper,
      rotate = props.rotate,
      onWordClick = props.onWordClick,
      onWordMouseOver = props.onWordMouseOver,
      onWordMouseOut = props.onWordMouseOut,
      defaultColor = props.defaultColor,
      formatImgDownload = props.formatImgDownload;

  var fillColor = function fillColor(d, i) {
    return d.color ? d.color : defaultColor || defaultProps.defaultColor;
  };

  var fontWeight = function fontWeight(d, i) {
    return d.fontWeight ? d.fontWeight : "normal";
  };

  var layout = (0, _d3Cloud["default"])().size([width || defaultProps.width, height || defaultProps.height]).font(font || defaultProps.font).words(data).padding(padding || defaultProps.padding).rotate(rotate || defaultProps.rotate).fontSize(fontSizeMapper).on("end", function (words) {
    var texts = (0, _d3Selection.select)("div.".concat(className)).append("svg").attr("width", layout.size()[0]).attr("height", layout.size()[1]).append("g").attr("transform", "translate(".concat(layout.size()[0] / 2, ",").concat(layout.size()[1] / 2, ")")).selectAll("text").data(words).enter().append("text").style("font-size", function (d) {
      return "".concat(d.size, "px");
    }).style("font-family", font).style("fill", fillColor).style("font-weight", fontWeight).attr("text-anchor", "middle").attr("transform", function (d) {
      return "translate(".concat([d.x, d.y], ")rotate(").concat(d.rotate, ")");
    }).text(function (d) {
      return d.text;
    });

    if (onWordClick) {
      texts.on("click", onWordClick);
    }

    if (onWordMouseOver) {
      texts.on("mouseover", onWordMouseOver);
    }

    if (onWordMouseOut) {
      texts.on("mouseout", onWordMouseOut);
    }
  });
  (0, _react.useEffect)(function () {
    layout.start();
  }, [data]); // convert svg to base64 image

  var loadPngData = function loadPngData(_ref) {
    var context = _ref.context,
        dataImg = _ref.dataImg,
        format = _ref.format,
        canvas = _ref.canvas;
    return new Promise(function (resolve, reject) {
      var image = new Image();

      image.onload = function () {
        context.clearRect(0, 0, width || defaultProps.width, height || defaultProps.height);
        context.drawImage(image, 0, 0, width || defaultProps.width, height || defaultProps.height);
        var pngData = canvas.toDataURL("image/" + format);
        return resolve(pngData);
      };

      image.src = dataImg;
    });
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      toBase64Image: function toBase64Image() {
        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var format, imgString, dataImg, canvas, context, data;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  format = formatImgDownload ? formatImgDownload : defaultProps.formatImgDownload;
                  imgString = new XMLSerializer().serializeToString(svgRef.current.querySelector("svg"));
                  dataImg = "data:image/svg+xml;base64,".concat(window.btoa(imgString));
                  canvas = document.createElement("canvas");
                  context = canvas.getContext("2d");
                  canvas.width = width || defaultProps.width;
                  canvas.height = height || defaultProps.height;
                  _context.next = 9;
                  return loadPngData({
                    dataImg: dataImg,
                    context: context,
                    format: format,
                    canvas: canvas
                  });

                case 9:
                  data = _context.sent;
                  return _context.abrupt("return", data);

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      }
    };
  }); // render based on new data

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: className,
    ref: svgRef
  });
});
var _default = WordCloud;
exports["default"] = _default;