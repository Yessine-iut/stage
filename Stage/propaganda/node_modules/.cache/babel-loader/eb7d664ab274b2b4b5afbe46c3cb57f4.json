{"ast":null,"code":"// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n(function (expose) {\n  /**\n   *  class Markdown\n   *\n   *  Markdown processing in Javascript done right. We have very particular views\n   *  on what constitutes 'right' which include:\n   *\n   *  - produces well-formed HTML (this means that em and strong nesting is\n   *    important)\n   *\n   *  - has an intermediate representation to allow processing of parsed data (We\n   *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n   *\n   *  - is easily extensible to add new dialects without having to rewrite the\n   *    entire parsing mechanics\n   *\n   *  - has a good test suite\n   *\n   *  This implementation fulfills all of these (except that the test suite could\n   *  do with expanding to automatically run all the fixtures from other Markdown\n   *  implementations.)\n   *\n   *  ##### Intermediate Representation\n   *\n   *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n   *\n   *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n   **/\n  var Markdown = expose.Markdown = function (dialect) {\n    switch (typeof dialect) {\n      case \"undefined\":\n        this.dialect = Markdown.dialects.Gruber;\n        break;\n\n      case \"object\":\n        this.dialect = dialect;\n        break;\n\n      default:\n        if (dialect in Markdown.dialects) {\n          this.dialect = Markdown.dialects[dialect];\n        } else {\n          throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n        }\n\n        break;\n    }\n\n    this.em_state = [];\n    this.strong_state = [];\n    this.debug_indent = \"\";\n  };\n  /**\n   *  parse( markdown, [dialect] ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *\n   *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n   **/\n\n\n  expose.parse = function (source, dialect) {\n    // dialect will default if undefined\n    var md = new Markdown(dialect);\n    return md.toTree(source);\n  };\n  /**\n   *  toHTML( markdown, [dialect]  ) -> String\n   *  toHTML( md_tree ) -> String\n   *  - markdown (String): markdown string to parse\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Take markdown (either as a string or as a JsonML tree) and run it through\n   *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n   **/\n\n\n  expose.toHTML = function toHTML(source, dialect, options) {\n    var input = expose.toHTMLTree(source, dialect, options);\n    return expose.renderJsonML(input);\n  };\n  /**\n   *  toHTMLTree( markdown, [dialect] ) -> JsonML\n   *  toHTMLTree( md_tree ) -> JsonML\n   *  - markdown (String): markdown string to parse\n   *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n   *  - md_tree (Markdown.JsonML): parsed markdown tree\n   *\n   *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n   *  to this function, it is first parsed into a markdown tree by calling\n   *  [[parse]].\n   **/\n\n\n  expose.toHTMLTree = function toHTMLTree(input, dialect, options) {\n    // convert string input to an MD tree\n    if (typeof input === \"string\") input = this.parse(input, dialect); // Now convert the MD tree to an HTML tree\n    // remove references from the tree\n\n    var attrs = extract_attr(input),\n        refs = {};\n\n    if (attrs && attrs.references) {\n      refs = attrs.references;\n    }\n\n    var html = convert_tree_to_html(input, refs, options);\n    merge_text_nodes(html);\n    return html;\n  }; // For Spidermonkey based engines\n\n\n  function mk_block_toSource() {\n    return \"Markdown.mk_block( \" + uneval(this.toString()) + \", \" + uneval(this.trailing) + \", \" + uneval(this.lineNumber) + \" )\";\n  } // node\n\n\n  function mk_block_inspect() {\n    var util = require(\"util\");\n\n    return \"Markdown.mk_block( \" + util.inspect(this.toString()) + \", \" + util.inspect(this.trailing) + \", \" + util.inspect(this.lineNumber) + \" )\";\n  }\n\n  var mk_block = Markdown.mk_block = function (block, trail, line) {\n    // Be helpful for default case in tests.\n    if (arguments.length == 1) trail = \"\\n\\n\";\n    var s = new String(block);\n    s.trailing = trail; // To make it clear its not just a string\n\n    s.inspect = mk_block_inspect;\n    s.toSource = mk_block_toSource;\n    if (line != undefined) s.lineNumber = line;\n    return s;\n  };\n\n  function count_lines(str) {\n    var n = 0,\n        i = -1;\n\n    while ((i = str.indexOf(\"\\n\", i + 1)) !== -1) n++;\n\n    return n;\n  } // Internal - split source into rough blocks\n\n\n  Markdown.prototype.split_blocks = function splitBlocks(input, startLine) {\n    input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\"); // [\\s\\S] matches _anything_ (newline or space)\n    // [^] is equivalent but doesn't work in IEs.\n\n    var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n        blocks = [],\n        m;\n    var line_no = 1;\n\n    if ((m = /^(\\s*\\n)/.exec(input)) != null) {\n      // skip (but count) leading blank lines\n      line_no += count_lines(m[0]);\n      re.lastIndex = m[0].length;\n    }\n\n    while ((m = re.exec(input)) !== null) {\n      if (m[2] == \"\\n#\") {\n        m[2] = \"\\n\";\n        re.lastIndex--;\n      }\n\n      blocks.push(mk_block(m[1], m[2], line_no));\n      line_no += count_lines(m[0]);\n    }\n\n    return blocks;\n  };\n  /**\n   *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n   *  - block (String): the block to process\n   *  - next (Array): the following blocks\n   *\n   * Process `block` and return an array of JsonML nodes representing `block`.\n   *\n   * It does this by asking each block level function in the dialect to process\n   * the block until one can. Succesful handling is indicated by returning an\n   * array (with zero or more JsonML nodes), failure by a false value.\n   *\n   * Blocks handlers are responsible for calling [[Markdown#processInline]]\n   * themselves as appropriate.\n   *\n   * If the blocks were split incorrectly or adjacent blocks need collapsing you\n   * can adjust `next` in place using shift/splice etc.\n   *\n   * If any of this default behaviour is not right for the dialect, you can\n   * define a `__call__` method on the dialect that will get invoked to handle\n   * the block processing.\n   */\n\n\n  Markdown.prototype.processBlock = function processBlock(block, next) {\n    var cbs = this.dialect.block,\n        ord = cbs.__order__;\n\n    if (\"__call__\" in cbs) {\n      return cbs.__call__.call(this, block, next);\n    }\n\n    for (var i = 0; i < ord.length; i++) {\n      //D:this.debug( \"Testing\", ord[i] );\n      var res = cbs[ord[i]].call(this, block, next);\n\n      if (res) {\n        //D:this.debug(\"  matched\");\n        if (!isArray(res) || res.length > 0 && !isArray(res[0])) this.debug(ord[i], \"didn't return a proper array\"); //D:this.debug( \"\" );\n\n        return res;\n      }\n    } // Uhoh! no match! Should we throw an error?\n\n\n    return [];\n  };\n\n  Markdown.prototype.processInline = function processInline(block) {\n    return this.dialect.inline.__call__.call(this, String(block));\n  };\n  /**\n   *  Markdown#toTree( source ) -> JsonML\n   *  - source (String): markdown source to parse\n   *\n   *  Parse `source` into a JsonML tree representing the markdown document.\n   **/\n  // custom_tree means set this.tree to `custom_tree` and restore old value on return\n\n\n  Markdown.prototype.toTree = function toTree(source, custom_root) {\n    var blocks = source instanceof Array ? source : this.split_blocks(source); // Make tree a member variable so its easier to mess with in extensions\n\n    var old_tree = this.tree;\n\n    try {\n      this.tree = custom_root || this.tree || [\"markdown\"];\n\n      blocks: while (blocks.length) {\n        var b = this.processBlock(blocks.shift(), blocks); // Reference blocks and the like won't return any content\n\n        if (!b.length) continue blocks;\n        this.tree.push.apply(this.tree, b);\n      }\n\n      return this.tree;\n    } finally {\n      if (custom_root) {\n        this.tree = old_tree;\n      }\n    }\n  }; // Noop by default\n\n\n  Markdown.prototype.debug = function () {\n    var args = Array.prototype.slice.call(arguments);\n    args.unshift(this.debug_indent);\n    if (typeof print !== \"undefined\") print.apply(print, args);\n    if (typeof console !== \"undefined\" && typeof console.log !== \"undefined\") console.log.apply(null, args);\n  };\n\n  Markdown.prototype.loop_re_over_block = function (re, block, cb) {\n    // Dont use /g regexps with this\n    var m,\n        b = block.valueOf();\n\n    while (b.length && (m = re.exec(b)) != null) {\n      b = b.substr(m[0].length);\n      cb.call(this, m);\n    }\n\n    return b;\n  };\n  /**\n   * Markdown.dialects\n   *\n   * Namespace of built-in dialects.\n   **/\n\n\n  Markdown.dialects = {};\n  /**\n   * Markdown.dialects.Gruber\n   *\n   * The default dialect that follows the rules set out by John Gruber's\n   * markdown.pl as closely as possible. Well actually we follow the behaviour of\n   * that script which in some places is not exactly what the syntax web page\n   * says.\n   **/\n\n  Markdown.dialects.Gruber = {\n    block: {\n      atxHeader: function atxHeader(block, next) {\n        var m = block.match(/^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/);\n        if (!m) return undefined;\n        var header = [\"header\", {\n          level: m[1].length\n        }];\n        Array.prototype.push.apply(header, this.processInline(m[2]));\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      setextHeader: function setextHeader(block, next) {\n        var m = block.match(/^(.*)\\n([-=])\\2\\2+(?:\\n|$)/);\n        if (!m) return undefined;\n        var level = m[2] === \"=\" ? 1 : 2;\n        var header = [\"header\", {\n          level: level\n        }, m[1]];\n        if (m[0].length < block.length) next.unshift(mk_block(block.substr(m[0].length), block.trailing, block.lineNumber + 2));\n        return [header];\n      },\n      code: function code(block, next) {\n        // |    Foo\n        // |bar\n        // should be a code block followed by a paragraph. Fun\n        //\n        // There might also be adjacent code block to merge.\n        var ret = [],\n            re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n            lines; // 4 spaces + content\n\n        if (!block.match(re)) return undefined;\n\n        block_search: do {\n          // Now pull out the rest of the lines\n          var b = this.loop_re_over_block(re, block.valueOf(), function (m) {\n            ret.push(m[1]);\n          });\n\n          if (b.length) {\n            // Case alluded to in first comment. push it back on as a new block\n            next.unshift(mk_block(b, block.trailing));\n            break block_search;\n          } else if (next.length) {\n            // Check the next block - it might be code too\n            if (!next[0].match(re)) break block_search; // Pull how how many blanks lines follow - minus two to account for .join\n\n            ret.push(block.trailing.replace(/[^\\n]/g, \"\").substring(2));\n            block = next.shift();\n          } else {\n            break block_search;\n          }\n        } while (true);\n\n        return [[\"code_block\", ret.join(\"\\n\")]];\n      },\n      horizRule: function horizRule(block, next) {\n        // this needs to find any hr in the block to handle abutting blocks\n        var m = block.match(/^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/);\n\n        if (!m) {\n          return undefined;\n        }\n\n        var jsonml = [[\"hr\"]]; // if there's a leading abutting block, process it\n\n        if (m[1]) {\n          jsonml.unshift.apply(jsonml, this.processBlock(m[1], []));\n        } // if there's a trailing abutting block, stick it into next\n\n\n        if (m[3]) {\n          next.unshift(mk_block(m[3]));\n        }\n\n        return jsonml;\n      },\n      // There are two types of lists. Tight and loose. Tight lists have no whitespace\n      // between the items (and result in text just in the <li>) and loose lists,\n      // which have an empty line between list items, resulting in (one or more)\n      // paragraphs inside the <li>.\n      //\n      // There are all sorts weird edge cases about the original markdown.pl's\n      // handling of lists:\n      //\n      // * Nested lists are supposed to be indented by four chars per level. But\n      //   if they aren't, you can get a nested list by indenting by less than\n      //   four so long as the indent doesn't match an indent of an existing list\n      //   item in the 'nest stack'.\n      //\n      // * The type of the list (bullet or number) is controlled just by the\n      //    first item at the indent. Subsequent changes are ignored unless they\n      //    are for nested lists\n      //\n      lists: function () {\n        // Use a closure to hide a few variables.\n        var any_list = \"[*+-]|\\\\d+\\\\.\",\n            bullet_list = /[*+-]/,\n            number_list = /\\d+\\./,\n            // Capture leading indent as it matters for determining nested lists.\n        is_list_re = new RegExp(\"^( {0,3})(\" + any_list + \")[ \\t]+\"),\n            indent_re = \"(?: {0,3}\\\\t| {4})\"; // TODO: Cache this regexp for certain depths.\n        // Create a regexp suitable for matching an li for a given stack depth\n\n        function regex_for_depth(depth) {\n          return new RegExp( // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" + // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth - 1) + \"}[ ]{0,4})\");\n        }\n\n        function expand_tab(input) {\n          return input.replace(/ {0,3}\\t/g, \"    \");\n        } // Add inline content `inline` to `li`. inline comes from processInline\n        // so is an array of content\n\n\n        function add(li, loose, inline, nl) {\n          if (loose) {\n            li.push([\"para\"].concat(inline));\n            return;\n          } // Hmmm, should this be any block level element or just paras?\n\n\n          var add_to = li[li.length - 1] instanceof Array && li[li.length - 1][0] == \"para\" ? li[li.length - 1] : li; // If there is already some content in this list, add the new line in\n\n          if (nl && li.length > 1) inline.unshift(nl);\n\n          for (var i = 0; i < inline.length; i++) {\n            var what = inline[i],\n                is_str = typeof what == \"string\";\n\n            if (is_str && add_to.length > 1 && typeof add_to[add_to.length - 1] == \"string\") {\n              add_to[add_to.length - 1] += what;\n            } else {\n              add_to.push(what);\n            }\n          }\n        } // contained means have an indent greater than the current one. On\n        // *every* line in the block\n\n\n        function get_contained_blocks(depth, blocks) {\n          var re = new RegExp(\"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\"),\n              replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n              ret = [];\n\n          while (blocks.length > 0) {\n            if (re.exec(blocks[0])) {\n              var b = blocks.shift(),\n                  // Now remove that indent\n              x = b.replace(replace, \"\");\n              ret.push(mk_block(x, b.trailing, b.lineNumber));\n            } else {\n              break;\n            }\n          }\n\n          return ret;\n        } // passed to stack.forEach to turn list items up the stack into paras\n\n\n        function paragraphify(s, i, stack) {\n          var list = s.list;\n          var last_li = list[list.length - 1];\n\n          if (last_li[1] instanceof Array && last_li[1][0] == \"para\") {\n            return;\n          }\n\n          if (i + 1 == stack.length) {\n            // Last stack frame\n            // Keep the same array, but replace the contents\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)));\n          } else {\n            var sublist = last_li.pop();\n            last_li.push([\"para\"].concat(last_li.splice(1, last_li.length - 1)), sublist);\n          }\n        } // The matcher function\n\n\n        return function (block, next) {\n          var m = block.match(is_list_re);\n          if (!m) return undefined;\n\n          function make_list(m) {\n            var list = bullet_list.exec(m[2]) ? [\"bulletlist\"] : [\"numberlist\"];\n            stack.push({\n              list: list,\n              indent: m[1]\n            });\n            return list;\n          }\n\n          var stack = [],\n              // Stack of lists for nesting.\n          list = make_list(m),\n              last_li,\n              loose = false,\n              ret = [stack[0].list],\n              i; // Loop to search over block looking for inner block elements and loose lists\n\n          loose_search: while (true) {\n            // Split into lines preserving new lines at end of line\n            var lines = block.split(/(?=\\n)/); // We have to grab all lines for a li and call processInline on them\n            // once as there are some inline things that can span lines.\n\n            var li_accumulate = \"\"; // Loop over the lines in this block looking for tight lists.\n\n            tight_search: for (var line_no = 0; line_no < lines.length; line_no++) {\n              var nl = \"\",\n                  l = lines[line_no].replace(/^\\n/, function (n) {\n                nl = n;\n                return \"\";\n              }); // TODO: really should cache this\n\n              var line_re = regex_for_depth(stack.length);\n              m = l.match(line_re); //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n              // We have a list item\n\n              if (m[1] !== undefined) {\n                // Process the previous list item, if any\n                if (li_accumulate.length) {\n                  add(last_li, loose, this.processInline(li_accumulate), nl); // Loose mode will have been dealt with. Reset it\n\n                  loose = false;\n                  li_accumulate = \"\";\n                }\n\n                m[1] = expand_tab(m[1]);\n                var wanted_depth = Math.floor(m[1].length / 4) + 1; //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n\n                if (wanted_depth > stack.length) {\n                  // Deep enough for a nested list outright\n                  //print ( \"new nested list\" );\n                  list = make_list(m);\n                  last_li.push(list);\n                  last_li = list[1] = [\"listitem\"];\n                } else {\n                  // We aren't deep enough to be strictly a new level. This is\n                  // where Md.pl goes nuts. If the indent matches a level in the\n                  // stack, put it there, else put it one deeper then the\n                  // wanted_depth deserves.\n                  var found = false;\n\n                  for (i = 0; i < stack.length; i++) {\n                    if (stack[i].indent != m[1]) continue;\n                    list = stack[i].list;\n                    stack.splice(i + 1, stack.length - (i + 1));\n                    found = true;\n                    break;\n                  }\n\n                  if (!found) {\n                    //print(\"not found. l:\", uneval(l));\n                    wanted_depth++;\n\n                    if (wanted_depth <= stack.length) {\n                      stack.splice(wanted_depth, stack.length - wanted_depth); //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n\n                      list = stack[wanted_depth - 1].list; //print(\"list:\", uneval(list) );\n                    } else {\n                      //print (\"made new stack for messy indent\");\n                      list = make_list(m);\n                      last_li.push(list);\n                    }\n                  } //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n\n\n                  last_li = [\"listitem\"];\n                  list.push(last_li);\n                } // end depth of shenegains\n\n\n                nl = \"\";\n              } // Add content\n\n\n              if (l.length > m[0].length) {\n                li_accumulate += nl + l.substr(m[0].length);\n              }\n            } // tight_search\n\n\n            if (li_accumulate.length) {\n              add(last_li, loose, this.processInline(li_accumulate), nl); // Loose mode will have been dealt with. Reset it\n\n              loose = false;\n              li_accumulate = \"\";\n            } // Look at the next block - we might have a loose list. Or an extra\n            // paragraph for the current li\n\n\n            var contained = get_contained_blocks(stack.length, next); // Deal with code blocks or properly nested lists\n\n            if (contained.length > 0) {\n              // Make sure all listitems up the stack are paragraphs\n              forEach(stack, paragraphify, this);\n              last_li.push.apply(last_li, this.toTree(contained, []));\n            }\n\n            var next_block = next[0] && next[0].valueOf() || \"\";\n\n            if (next_block.match(is_list_re) || next_block.match(/^ /)) {\n              block = next.shift(); // Check for an HR following a list: features/lists/hr_abutting\n\n              var hr = this.dialect.block.horizRule(block, next);\n\n              if (hr) {\n                ret.push.apply(ret, hr);\n                break;\n              } // Make sure all listitems up the stack are paragraphs\n\n\n              forEach(stack, paragraphify, this);\n              loose = true;\n              continue loose_search;\n            }\n\n            break;\n          } // loose_search\n\n\n          return ret;\n        };\n      }(),\n      blockquote: function blockquote(block, next) {\n        if (!block.match(/^>/m)) return undefined;\n        var jsonml = []; // separate out the leading abutting block, if any. I.e. in this case:\n        //\n        //  a\n        //  > b\n        //\n\n        if (block[0] != \">\") {\n          var lines = block.split(/\\n/),\n              prev = [],\n              line_no = block.lineNumber; // keep shifting lines until you find a crotchet\n\n          while (lines.length && lines[0][0] != \">\") {\n            prev.push(lines.shift());\n            line_no++;\n          }\n\n          var abutting = mk_block(prev.join(\"\\n\"), \"\\n\", block.lineNumber);\n          jsonml.push.apply(jsonml, this.processBlock(abutting, [])); // reassemble new block of just block quotes!\n\n          block = mk_block(lines.join(\"\\n\"), block.trailing, line_no);\n        } // if the next block is also a blockquote merge it in\n\n\n        while (next.length && next[0][0] == \">\") {\n          var b = next.shift();\n          block = mk_block(block + block.trailing + b, b.trailing, block.lineNumber);\n        } // Strip off the leading \"> \" and re-process as a block.\n\n\n        var input = block.replace(/^> ?/gm, \"\"),\n            old_tree = this.tree,\n            processedBlock = this.toTree(input, [\"blockquote\"]),\n            attr = extract_attr(processedBlock); // If any link references were found get rid of them\n\n        if (attr && attr.references) {\n          delete attr.references; // And then remove the attribute object if it's empty\n\n          if (isEmpty(attr)) {\n            processedBlock.splice(1, 1);\n          }\n        }\n\n        jsonml.push(processedBlock);\n        return jsonml;\n      },\n      referenceDefn: function referenceDefn(block, next) {\n        var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/; // interesting matches are [ , ref_id, url, , title, title ]\n\n        if (!block.match(re)) return undefined; // make an attribute node if it doesn't exist\n\n        if (!extract_attr(this.tree)) {\n          this.tree.splice(1, 0, {});\n        }\n\n        var attrs = extract_attr(this.tree); // make a references hash if it doesn't exist\n\n        if (attrs.references === undefined) {\n          attrs.references = {};\n        }\n\n        var b = this.loop_re_over_block(re, block, function (m) {\n          if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n          var ref = attrs.references[m[1].toLowerCase()] = {\n            href: m[2]\n          };\n          if (m[4] !== undefined) ref.title = m[4];else if (m[5] !== undefined) ref.title = m[5];\n        });\n        if (b.length) next.unshift(mk_block(b, block.trailing));\n        return [];\n      },\n      para: function para(block, next) {\n        // everything's a para!\n        return [[\"para\"].concat(this.processInline(block))];\n      }\n    }\n  };\n  Markdown.dialects.Gruber.inline = {\n    __oneElement__: function oneElement(text, patterns_or_re, previous_nodes) {\n      var m,\n          res,\n          lastIndex = 0;\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp(\"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\");\n      m = re.exec(text);\n\n      if (!m) {\n        // Just boring text\n        return [text.length, text];\n      } else if (m[1]) {\n        // Some un-interesting text matched. Return that first\n        return [m[1].length, m[1]];\n      }\n\n      var res;\n\n      if (m[2] in this.dialect.inline) {\n        res = this.dialect.inline[m[2]].call(this, text.substr(m.index), m, previous_nodes || []);\n      } // Default for now to make dev easier. just slurp special and output it.\n\n\n      res = res || [m[2].length, m[2]];\n      return res;\n    },\n    __call__: function inline(text, patterns) {\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if (typeof x == \"string\" && typeof out[out.length - 1] == \"string\") out[out.length - 1] += x;else out.push(x);\n      }\n\n      while (text.length > 0) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out);\n        text = text.substr(res.shift());\n        forEach(res, add);\n      }\n\n      return out;\n    },\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n    __escape__: /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n    \"\\\\\": function escaped(text) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if (this.dialect.inline.__escape__.exec(text)) return [2, text.charAt(1)];else // Not an esacpe\n        return [1, \"\\\\\"];\n    },\n    \"![\": function image(text) {\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match(/^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/);\n\n      if (m) {\n        if (m[2] && m[2][0] == \"<\" && m[2][m[2].length - 1] == \">\") m[2] = m[2].substring(1, m[2].length - 1);\n        m[2] = this.dialect.inline.__call__.call(this, m[2], /\\\\/)[0];\n        var attrs = {\n          alt: m[1],\n          href: m[2] || \"\"\n        };\n        if (m[4] !== undefined) attrs.title = m[4];\n        return [m[0].length, [\"img\", attrs]];\n      } // ![Alt text][id]\n\n\n      m = text.match(/^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/);\n\n      if (m) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [m[0].length, [\"img_ref\", {\n          alt: m[1],\n          ref: m[2].toLowerCase(),\n          original: m[0]\n        }]];\n      } // Just consume the '!['\n\n\n      return [2, \"![\"];\n    },\n    \"[\": function link(text) {\n      var orig = String(text); // Inline content is possible inside `link text`\n\n      var res = Markdown.DialectHelpers.inline_until_char.call(this, text.substr(1), \"]\"); // No closing ']' found. Just consume the [\n\n      if (!res) return [1, \"[\"];\n      var consumed = 1 + res[0],\n          children = res[1],\n          link,\n          attrs; // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n\n      text = text.substr(consumed); // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n\n      var m = text.match(/^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/);\n\n      if (m) {\n        var url = m[1];\n        consumed += m[0].length;\n        if (url && url[0] == \"<\" && url[url.length - 1] == \">\") url = url.substring(1, url.length - 1); // If there is a title we don't have to worry about parens in the url\n\n        if (!m[3]) {\n          var open_parens = 1; // One open that isn't in the capture\n\n          for (var len = 0; len < url.length; len++) {\n            switch (url[len]) {\n              case \"(\":\n                open_parens++;\n                break;\n\n              case \")\":\n                if (--open_parens == 0) {\n                  consumed -= url.length - len;\n                  url = url.substring(0, len);\n                }\n\n                break;\n            }\n          }\n        } // Process escapes only\n\n\n        url = this.dialect.inline.__call__.call(this, url, /\\\\/)[0];\n        attrs = {\n          href: url || \"\"\n        };\n        if (m[3] !== undefined) attrs.title = m[3];\n        link = [\"link\", attrs].concat(children);\n        return [consumed, link];\n      } // [Alt text][id]\n      // [Alt text] [id]\n\n\n      m = text.match(/^\\s*\\[(.*?)\\]/);\n\n      if (m) {\n        consumed += m[0].length; // [links][] uses links as its reference\n\n        attrs = {\n          ref: (m[1] || String(children)).toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs].concat(children); // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n\n        return [consumed, link];\n      } // [id]\n      // Only if id is plain (no formatting.)\n\n\n      if (children.length == 1 && typeof children[0] == \"string\") {\n        attrs = {\n          ref: children[0].toLowerCase(),\n          original: orig.substr(0, consumed)\n        };\n        link = [\"link_ref\", attrs, children[0]];\n        return [consumed, link];\n      } // Just consume the \"[\"\n\n\n      return [1, \"[\"];\n    },\n    \"<\": function autoLink(text) {\n      var m;\n\n      if ((m = text.match(/^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/)) != null) {\n        if (m[3]) {\n          return [m[0].length, [\"link\", {\n            href: \"mailto:\" + m[3]\n          }, m[3]]];\n        } else if (m[2] == \"mailto\") {\n          return [m[0].length, [\"link\", {\n            href: m[1]\n          }, m[1].substr(\"mailto:\".length)]];\n        } else return [m[0].length, [\"link\", {\n          href: m[1]\n        }, m[1]]];\n      }\n\n      return [1, \"<\"];\n    },\n    \"`\": function inlineCode(text) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match(/(`+)(([\\s\\S]*?)\\1)/);\n      if (m && m[2]) return [m[1].length + m[2].length, [\"inlinecode\", m[3]]];else {\n        // TODO: No matching end code found - warn!\n        return [1, \"`\"];\n      }\n    },\n    \"  \\n\": function lineBreak(text) {\n      return [3, [\"linebreak\"]];\n    }\n  }; // Meta Helper/generator method for em and strong handling\n\n  function strong_em(tag, md) {\n    var state_slot = tag + \"_state\",\n        other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n    function CloseTag(len) {\n      this.len_after = len;\n      this.name = \"close_\" + md;\n    }\n\n    return function (text, orig_match) {\n      if (this[state_slot][0] == md) {\n        // Most recent em is of this type\n        //D:this.debug(\"closing\", md);\n        this[state_slot].shift(); // \"Consume\" everything to go back to the recrusion in the else-block below\n\n        return [text.length, new CloseTag(text.length - md.length)];\n      } else {\n        // Store a clone of the em/strong states\n        var other = this[other_slot].slice(),\n            state = this[state_slot].slice();\n        this[state_slot].unshift(md); //D:this.debug_indent += \"  \";\n        // Recurse\n\n        var res = this.processInline(text.substr(md.length)); //D:this.debug_indent = this.debug_indent.substr(2);\n\n        var last = res[res.length - 1]; //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n        var check = this[state_slot].shift();\n\n        if (last instanceof CloseTag) {\n          res.pop(); // We matched! Huzzah.\n\n          var consumed = text.length - last.len_after;\n          return [consumed, [tag].concat(res)];\n        } else {\n          // Restore the state of the other kind. We might have mistakenly closed it.\n          this[other_slot] = other;\n          this[state_slot] = state; // We can't reuse the processed result as it could have wrong parsing contexts in it.\n\n          return [md.length, md];\n        }\n      }\n    }; // End returned function\n  }\n\n  Markdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\n  Markdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\n  Markdown.dialects.Gruber.inline[\"*\"] = strong_em(\"em\", \"*\");\n  Markdown.dialects.Gruber.inline[\"_\"] = strong_em(\"em\", \"_\"); // Build default order from insertion order.\n\n  Markdown.buildBlockOrder = function (d) {\n    var ord = [];\n\n    for (var i in d) {\n      if (i == \"__order__\" || i == \"__call__\") continue;\n      ord.push(i);\n    }\n\n    d.__order__ = ord;\n  }; // Build patterns for inline matcher\n\n\n  Markdown.buildInlinePatterns = function (d) {\n    var patterns = [];\n\n    for (var i in d) {\n      // __foo__ is reserved and not a pattern\n      if (i.match(/^__.*__$/)) continue;\n      var l = i.replace(/([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\").replace(/\\n/, \"\\\\n\");\n      patterns.push(i.length == 1 ? l : \"(?:\" + l + \")\");\n    }\n\n    patterns = patterns.join(\"|\");\n    d.__patterns__ = patterns; //print(\"patterns:\", uneval( patterns ) );\n\n    var fn = d.__call__;\n\n    d.__call__ = function (text, pattern) {\n      if (pattern != undefined) {\n        return fn.call(this, text, pattern);\n      } else {\n        return fn.call(this, text, patterns);\n      }\n    };\n  };\n\n  Markdown.DialectHelpers = {};\n\n  Markdown.DialectHelpers.inline_until_char = function (text, want) {\n    var consumed = 0,\n        nodes = [];\n\n    while (true) {\n      if (text.charAt(consumed) == want) {\n        // Found the character we were looking for\n        consumed++;\n        return [consumed, nodes];\n      }\n\n      if (consumed >= text.length) {\n        // No closing char found. Abort.\n        return null;\n      }\n\n      var res = this.dialect.inline.__oneElement__.call(this, text.substr(consumed));\n\n      consumed += res[0]; // Add any returned nodes.\n\n      nodes.push.apply(nodes, res.slice(1));\n    }\n  }; // Helper function to make sub-classing a dialect easier\n\n\n  Markdown.subclassDialect = function (d) {\n    function Block() {}\n\n    Block.prototype = d.block;\n\n    function Inline() {}\n\n    Inline.prototype = d.inline;\n    return {\n      block: new Block(),\n      inline: new Inline()\n    };\n  };\n\n  Markdown.buildBlockOrder(Markdown.dialects.Gruber.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Gruber.inline);\n  Markdown.dialects.Maruku = Markdown.subclassDialect(Markdown.dialects.Gruber);\n\n  Markdown.dialects.Maruku.processMetaHash = function processMetaHash(meta_string) {\n    var meta = split_meta_hash(meta_string),\n        attr = {};\n\n    for (var i = 0; i < meta.length; ++i) {\n      // id: #foo\n      if (/^#/.test(meta[i])) {\n        attr.id = meta[i].substring(1);\n      } // class: .foo\n      else if (/^\\./.test(meta[i])) {\n          // if class already exists, append the new one\n          if (attr[\"class\"]) {\n            attr[\"class\"] = attr[\"class\"] + meta[i].replace(/./, \" \");\n          } else {\n            attr[\"class\"] = meta[i].substring(1);\n          }\n        } // attribute: foo=bar\n        else if (/\\=/.test(meta[i])) {\n            var s = meta[i].split(/\\=/);\n            attr[s[0]] = s[1];\n          }\n    }\n\n    return attr;\n  };\n\n  function split_meta_hash(meta_string) {\n    var meta = meta_string.split(\"\"),\n        parts = [\"\"],\n        in_quotes = false;\n\n    while (meta.length) {\n      var letter = meta.shift();\n\n      switch (letter) {\n        case \" \":\n          // if we're in a quoted section, keep it\n          if (in_quotes) {\n            parts[parts.length - 1] += letter;\n          } // otherwise make a new part\n          else {\n              parts.push(\"\");\n            }\n\n          break;\n\n        case \"'\":\n        case '\"':\n          // reverse the quotes and move straight on\n          in_quotes = !in_quotes;\n          break;\n\n        case \"\\\\\":\n          // shift off the next letter to be used straight away.\n          // it was escaped so we'll keep it whatever it is\n          letter = meta.shift();\n\n        default:\n          parts[parts.length - 1] += letter;\n          break;\n      }\n    }\n\n    return parts;\n  }\n\n  Markdown.dialects.Maruku.block.document_meta = function document_meta(block, next) {\n    // we're only interested in the first block\n    if (block.lineNumber > 1) return undefined; // document_meta blocks consist of one or more lines of `Key: Value\\n`\n\n    if (!block.match(/^(?:\\w+:.*\\n)*\\w+:.*$/)) return undefined; // make an attribute node if it doesn't exist\n\n    if (!extract_attr(this.tree)) {\n      this.tree.splice(1, 0, {});\n    }\n\n    var pairs = block.split(/\\n/);\n\n    for (p in pairs) {\n      var m = pairs[p].match(/(\\w+):\\s*(.*)$/),\n          key = m[1].toLowerCase(),\n          value = m[2];\n      this.tree[1][key] = value;\n    } // document_meta produces no content!\n\n\n    return [];\n  };\n\n  Markdown.dialects.Maruku.block.block_meta = function block_meta(block, next) {\n    // check if the last line of the block is an meta hash\n    var m = block.match(/(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/);\n    if (!m) return undefined; // process the meta hash\n\n    var attr = this.dialect.processMetaHash(m[2]);\n    var hash; // if we matched ^ then we need to apply meta to the previous block\n\n    if (m[1] === \"\") {\n      var node = this.tree[this.tree.length - 1];\n      hash = extract_attr(node); // if the node is a string (rather than JsonML), bail\n\n      if (typeof node === \"string\") return undefined; // create the attribute hash if it doesn't exist\n\n      if (!hash) {\n        hash = {};\n        node.splice(1, 0, hash);\n      } // add the attributes in\n\n\n      for (a in attr) {\n        hash[a] = attr[a];\n      } // return nothing so the meta hash is removed\n\n\n      return [];\n    } // pull the meta hash off the block and process what's left\n\n\n    var b = block.replace(/\\n.*$/, \"\"),\n        result = this.processBlock(b, []); // get or make the attributes hash\n\n    hash = extract_attr(result[0]);\n\n    if (!hash) {\n      hash = {};\n      result[0].splice(1, 0, hash);\n    } // attach the attributes to the block\n\n\n    for (a in attr) {\n      hash[a] = attr[a];\n    }\n\n    return result;\n  };\n\n  Markdown.dialects.Maruku.block.definition_list = function definition_list(block, next) {\n    // one or more terms followed by one or more definitions, in a single block\n    var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n        list = [\"dl\"],\n        i,\n        m; // see if we're dealing with a tight or loose block\n\n    if (m = block.match(tight)) {\n      // pull subsequent tight DL blocks out of `next`\n      var blocks = [block];\n\n      while (next.length && tight.exec(next[0])) {\n        blocks.push(next.shift());\n      }\n\n      for (var b = 0; b < blocks.length; ++b) {\n        var m = blocks[b].match(tight),\n            terms = m[1].replace(/\\n$/, \"\").split(/\\n/),\n            defns = m[2].split(/\\n:\\s+/); // print( uneval( m ) );\n\n        for (i = 0; i < terms.length; ++i) {\n          list.push([\"dt\", terms[i]]);\n        }\n\n        for (i = 0; i < defns.length; ++i) {\n          // run inline processing over the definition\n          list.push([\"dd\"].concat(this.processInline(defns[i].replace(/(\\n)\\s+/, \"$1\"))));\n        }\n      }\n    } else {\n      return undefined;\n    }\n\n    return [list];\n  }; // splits on unescaped instances of @ch. If @ch is not a character the result\n  // can be unpredictable\n\n\n  Markdown.dialects.Maruku.block.table = function table(block, next) {\n    var _split_on_unescaped = function (s, ch) {\n      ch = ch || '\\\\s';\n\n      if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) {\n        ch = '\\\\' + ch;\n      }\n\n      var res = [],\n          r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n          m;\n\n      while (m = s.match(r)) {\n        res.push(m[1]);\n        s = m[2];\n      }\n\n      res.push(s);\n      return res;\n    };\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n    no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i,\n        m;\n\n    if (m = block.match(leading_pipe)) {\n      // remove leading pipes in contents\n      // (header and horizontal rule already have the leading pipe left out)\n      m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (!(m = block.match(no_leading_pipe))) {\n      return undefined;\n    }\n\n    var table = [\"table\", [\"thead\", [\"tr\"]], [\"tbody\"]]; // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|'); // process alignment\n\n    var html_attrs = [];\n    forEach(m[2], function (s) {\n      if (s.match(/^\\s*-+:\\s*$/)) html_attrs.push({\n        align: \"right\"\n      });else if (s.match(/^\\s*:-+\\s*$/)) html_attrs.push({\n        align: \"left\"\n      });else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({\n        align: \"center\"\n      });else html_attrs.push({});\n    }); // now for the header, avoid escaped pipes\n\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n\n    for (i = 0; i < m[1].length; i++) {\n      table[1][1].push(['th', html_attrs[i] || {}].concat(this.processInline(m[1][i].trim())));\n    } // now for body contents\n\n\n    forEach(m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n      var html_row = ['tr'];\n      row = _split_on_unescaped(row, '|');\n\n      for (i = 0; i < row.length; i++) {\n        html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n      }\n\n      table[2].push(html_row);\n    }, this);\n    return [table];\n  };\n\n  Markdown.dialects.Maruku.inline[\"{:\"] = function inline_meta(text, matches, out) {\n    if (!out.length) {\n      return [2, \"{:\"];\n    } // get the preceeding element\n\n\n    var before = out[out.length - 1];\n\n    if (typeof before === \"string\") {\n      return [2, \"{:\"];\n    } // match a meta hash\n\n\n    var m = text.match(/^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/); // no match, false alarm\n\n    if (!m) {\n      return [2, \"{:\"];\n    } // attach the attributes to the preceeding element\n\n\n    var meta = this.dialect.processMetaHash(m[1]),\n        attr = extract_attr(before);\n\n    if (!attr) {\n      attr = {};\n      before.splice(1, 0, attr);\n    }\n\n    for (var k in meta) {\n      attr[k] = meta[k];\n    } // cut out the string and replace it with nothing\n\n\n    return [m[0].length, \"\"];\n  };\n\n  Markdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n  Markdown.buildBlockOrder(Markdown.dialects.Maruku.block);\n  Markdown.buildInlinePatterns(Markdown.dialects.Maruku.inline);\n\n  var isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) == \"[object Array]\";\n  };\n\n  var forEach; // Don't mess with Array.prototype. Its not friendly\n\n  if (Array.prototype.forEach) {\n    forEach = function (arr, cb, thisp) {\n      return arr.forEach(cb, thisp);\n    };\n  } else {\n    forEach = function (arr, cb, thisp) {\n      for (var i = 0; i < arr.length; i++) {\n        cb.call(thisp || arr, arr[i], i, arr);\n      }\n    };\n  }\n\n  var isEmpty = function (obj) {\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  function extract_attr(jsonml) {\n    return isArray(jsonml) && jsonml.length > 1 && typeof jsonml[1] === \"object\" && !isArray(jsonml[1]) ? jsonml[1] : undefined;\n  }\n  /**\n   *  renderJsonML( jsonml[, options] ) -> String\n   *  - jsonml (Array): JsonML array to render to XML\n   *  - options (Object): options\n   *\n   *  Converts the given JsonML into well-formed XML.\n   *\n   *  The options currently understood are:\n   *\n   *  - root (Boolean): wether or not the root node should be included in the\n   *    output, or just its children. The default `false` is to not include the\n   *    root itself.\n   */\n\n\n  expose.renderJsonML = function (jsonml, options) {\n    options = options || {}; // include the root element in the rendered output?\n\n    options.root = options.root || false;\n    var content = [];\n\n    if (options.root) {\n      content.push(render_tree(jsonml));\n    } else {\n      jsonml.shift(); // get rid of the tag\n\n      if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n        jsonml.shift(); // get rid of the attributes\n      }\n\n      while (jsonml.length) {\n        content.push(render_tree(jsonml.shift()));\n      }\n    }\n\n    return content.join(\"\\n\\n\");\n  };\n\n  function escapeHTML(text) {\n    return text.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n  }\n\n  function render_tree(jsonml) {\n    // basic case\n    if (typeof jsonml === \"string\") {\n      return escapeHTML(jsonml);\n    }\n\n    var tag = jsonml.shift(),\n        attributes = {},\n        content = [];\n\n    if (jsonml.length && typeof jsonml[0] === \"object\" && !(jsonml[0] instanceof Array)) {\n      attributes = jsonml.shift();\n    }\n\n    while (jsonml.length) {\n      content.push(render_tree(jsonml.shift()));\n    }\n\n    var tag_attrs = \"\";\n\n    for (var a in attributes) {\n      tag_attrs += \" \" + a + '=\"' + escapeHTML(attributes[a]) + '\"';\n    } // be careful about adding whitespace here for inline elements\n\n\n    if (tag == \"img\" || tag == \"br\" || tag == \"hr\") {\n      return \"<\" + tag + tag_attrs + \"/>\";\n    } else {\n      return \"<\" + tag + tag_attrs + \">\" + content.join(\"\") + \"</\" + tag + \">\";\n    }\n  }\n\n  function convert_tree_to_html(tree, references, options) {\n    var i;\n    options = options || {}; // shallow clone\n\n    var jsonml = tree.slice(0);\n\n    if (typeof options.preprocessTreeNode === \"function\") {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n    } // Clone attributes if they exist\n\n\n    var attrs = extract_attr(jsonml);\n\n    if (attrs) {\n      jsonml[1] = {};\n\n      for (i in attrs) {\n        jsonml[1][i] = attrs[i];\n      }\n\n      attrs = jsonml[1];\n    } // basic case\n\n\n    if (typeof jsonml === \"string\") {\n      return jsonml;\n    } // convert this node\n\n\n    switch (jsonml[0]) {\n      case \"header\":\n        jsonml[0] = \"h\" + jsonml[1].level;\n        delete jsonml[1].level;\n        break;\n\n      case \"bulletlist\":\n        jsonml[0] = \"ul\";\n        break;\n\n      case \"numberlist\":\n        jsonml[0] = \"ol\";\n        break;\n\n      case \"listitem\":\n        jsonml[0] = \"li\";\n        break;\n\n      case \"para\":\n        jsonml[0] = \"p\";\n        break;\n\n      case \"markdown\":\n        jsonml[0] = \"html\";\n        if (attrs) delete attrs.references;\n        break;\n\n      case \"code_block\":\n        jsonml[0] = \"pre\";\n        i = attrs ? 2 : 1;\n        var code = [\"code\"];\n        code.push.apply(code, jsonml.splice(i, jsonml.length - i));\n        jsonml[i] = code;\n        break;\n\n      case \"inlinecode\":\n        jsonml[0] = \"code\";\n        break;\n\n      case \"img\":\n        jsonml[1].src = jsonml[1].href;\n        delete jsonml[1].href;\n        break;\n\n      case \"linebreak\":\n        jsonml[0] = \"br\";\n        break;\n\n      case \"link\":\n        jsonml[0] = \"a\";\n        break;\n\n      case \"link_ref\":\n        jsonml[0] = \"a\"; // grab this ref and clean up the attribute node\n\n        var ref = references[attrs.ref]; // if the reference exists, make the link\n\n        if (ref) {\n          delete attrs.ref; // add in the href and title, if present\n\n          attrs.href = ref.href;\n\n          if (ref.title) {\n            attrs.title = ref.title;\n          } // get rid of the unneeded original text\n\n\n          delete attrs.original;\n        } // the reference doesn't exist, so revert to plain text\n        else {\n            return attrs.original;\n          }\n\n        break;\n\n      case \"img_ref\":\n        jsonml[0] = \"img\"; // grab this ref and clean up the attribute node\n\n        var ref = references[attrs.ref]; // if the reference exists, make the link\n\n        if (ref) {\n          delete attrs.ref; // add in the href and title, if present\n\n          attrs.src = ref.href;\n\n          if (ref.title) {\n            attrs.title = ref.title;\n          } // get rid of the unneeded original text\n\n\n          delete attrs.original;\n        } // the reference doesn't exist, so revert to plain text\n        else {\n            return attrs.original;\n          }\n\n        break;\n    } // convert all the children\n\n\n    i = 1; // deal with the attribute node, if it exists\n\n    if (attrs) {\n      // if there are keys, skip over it\n      for (var key in jsonml[1]) {\n        i = 2;\n        break;\n      } // if there aren't, remove it\n\n\n      if (i === 1) {\n        jsonml.splice(i, 1);\n      }\n    }\n\n    for (; i < jsonml.length; ++i) {\n      jsonml[i] = convert_tree_to_html(jsonml[i], references, options);\n    }\n\n    return jsonml;\n  } // merges adjacent text nodes into a single node\n\n\n  function merge_text_nodes(jsonml) {\n    // skip the tag name and attribute hash\n    var i = extract_attr(jsonml) ? 2 : 1;\n\n    while (i < jsonml.length) {\n      // if it's a string check the next item too\n      if (typeof jsonml[i] === \"string\") {\n        if (i + 1 < jsonml.length && typeof jsonml[i + 1] === \"string\") {\n          // merge the second string into the first and remove it\n          jsonml[i] += jsonml.splice(i + 1, 1)[0];\n        } else {\n          ++i;\n        }\n      } // if it's not a string recurse\n      else {\n          merge_text_nodes(jsonml[i]);\n          ++i;\n        }\n    }\n  }\n})(function () {\n  if (typeof exports === \"undefined\") {\n    window.markdown = {};\n    return window.markdown;\n  } else {\n    return exports;\n  }\n}());","map":{"version":3,"sources":["C:/Users/dofla/Desktop/Stage/propaganda/node_modules/markdown/lib/markdown.js"],"names":["expose","Markdown","dialect","dialects","Gruber","Error","String","em_state","strong_state","debug_indent","parse","source","md","toTree","toHTML","options","input","toHTMLTree","renderJsonML","attrs","extract_attr","refs","references","html","convert_tree_to_html","merge_text_nodes","mk_block_toSource","uneval","toString","trailing","lineNumber","mk_block_inspect","util","require","inspect","mk_block","block","trail","line","arguments","length","s","toSource","undefined","count_lines","str","n","i","indexOf","prototype","split_blocks","splitBlocks","startLine","replace","re","blocks","m","line_no","exec","lastIndex","push","processBlock","next","cbs","ord","__order__","__call__","call","res","isArray","debug","processInline","inline","custom_root","Array","old_tree","tree","b","shift","apply","args","slice","unshift","print","console","log","loop_re_over_block","cb","valueOf","substr","atxHeader","match","header","level","setextHeader","code","ret","lines","block_search","substring","join","horizRule","jsonml","lists","any_list","bullet_list","number_list","is_list_re","RegExp","indent_re","regex_for_depth","depth","expand_tab","add","li","loose","nl","concat","add_to","what","is_str","get_contained_blocks","x","paragraphify","stack","list","last_li","splice","sublist","pop","make_list","indent","loose_search","split","li_accumulate","tight_search","l","line_re","wanted_depth","Math","floor","found","contained","forEach","next_block","hr","blockquote","prev","abutting","processedBlock","attr","isEmpty","referenceDefn","ref","toLowerCase","href","title","para","__oneElement__","oneElement","text","patterns_or_re","previous_nodes","__patterns__","index","patterns","out","__escape__","escaped","charAt","image","alt","original","link","orig","DialectHelpers","inline_until_char","consumed","children","url","open_parens","len","autoLink","inlineCode","lineBreak","strong_em","tag","state_slot","other_slot","CloseTag","len_after","name","orig_match","other","state","last","check","buildBlockOrder","d","buildInlinePatterns","fn","pattern","want","nodes","subclassDialect","Block","Inline","Maruku","processMetaHash","meta_string","meta","split_meta_hash","test","id","parts","in_quotes","letter","document_meta","pairs","p","key","value","block_meta","hash","node","a","result","definition_list","tight","terms","defns","table","_split_on_unescaped","ch","r","leading_pipe","no_leading_pipe","html_attrs","align","trim","row","html_row","inline_meta","matches","before","k","obj","Object","arr","thisp","hasOwnProperty","root","content","render_tree","escapeHTML","attributes","tag_attrs","preprocessTreeNode","src","exports","window","markdown"],"mappings":"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","sourcesContent":["// Released under MIT license\n// Copyright (c) 2009-2010 Dominic Baggott\n// Copyright (c) 2009-2010 Ash Berlin\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\n\n/*jshint browser:true, devel:true */\n\n(function( expose ) {\n\n/**\n *  class Markdown\n *\n *  Markdown processing in Javascript done right. We have very particular views\n *  on what constitutes 'right' which include:\n *\n *  - produces well-formed HTML (this means that em and strong nesting is\n *    important)\n *\n *  - has an intermediate representation to allow processing of parsed data (We\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\n *\n *  - is easily extensible to add new dialects without having to rewrite the\n *    entire parsing mechanics\n *\n *  - has a good test suite\n *\n *  This implementation fulfills all of these (except that the test suite could\n *  do with expanding to automatically run all the fixtures from other Markdown\n *  implementations.)\n *\n *  ##### Intermediate Representation\n *\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\n *\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\n **/\nvar Markdown = expose.Markdown = function(dialect) {\n  switch (typeof dialect) {\n    case \"undefined\":\n      this.dialect = Markdown.dialects.Gruber;\n      break;\n    case \"object\":\n      this.dialect = dialect;\n      break;\n    default:\n      if ( dialect in Markdown.dialects ) {\n        this.dialect = Markdown.dialects[dialect];\n      }\n      else {\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\n      }\n      break;\n  }\n  this.em_state = [];\n  this.strong_state = [];\n  this.debug_indent = \"\";\n};\n\n/**\n *  parse( markdown, [dialect] ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\n **/\nexpose.parse = function( source, dialect ) {\n  // dialect will default if undefined\n  var md = new Markdown( dialect );\n  return md.toTree( source );\n};\n\n/**\n *  toHTML( markdown, [dialect]  ) -> String\n *  toHTML( md_tree ) -> String\n *  - markdown (String): markdown string to parse\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Take markdown (either as a string or as a JsonML tree) and run it through\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\n **/\nexpose.toHTML = function toHTML( source , dialect , options ) {\n  var input = expose.toHTMLTree( source , dialect , options );\n\n  return expose.renderJsonML( input );\n};\n\n/**\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\n *  toHTMLTree( md_tree ) -> JsonML\n *  - markdown (String): markdown string to parse\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\n *  - md_tree (Markdown.JsonML): parsed markdown tree\n *\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\n *  to this function, it is first parsed into a markdown tree by calling\n *  [[parse]].\n **/\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\n  // convert string input to an MD tree\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\n\n  // Now convert the MD tree to an HTML tree\n\n  // remove references from the tree\n  var attrs = extract_attr( input ),\n      refs = {};\n\n  if ( attrs && attrs.references ) {\n    refs = attrs.references;\n  }\n\n  var html = convert_tree_to_html( input, refs , options );\n  merge_text_nodes( html );\n  return html;\n};\n\n// For Spidermonkey based engines\nfunction mk_block_toSource() {\n  return \"Markdown.mk_block( \" +\n          uneval(this.toString()) +\n          \", \" +\n          uneval(this.trailing) +\n          \", \" +\n          uneval(this.lineNumber) +\n          \" )\";\n}\n\n// node\nfunction mk_block_inspect() {\n  var util = require(\"util\");\n  return \"Markdown.mk_block( \" +\n          util.inspect(this.toString()) +\n          \", \" +\n          util.inspect(this.trailing) +\n          \", \" +\n          util.inspect(this.lineNumber) +\n          \" )\";\n\n}\n\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\n  // Be helpful for default case in tests.\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\n\n  var s = new String(block);\n  s.trailing = trail;\n  // To make it clear its not just a string\n  s.inspect = mk_block_inspect;\n  s.toSource = mk_block_toSource;\n\n  if ( line != undefined )\n    s.lineNumber = line;\n\n  return s;\n};\n\nfunction count_lines( str ) {\n  var n = 0, i = -1;\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\n  return n;\n}\n\n// Internal - split source into rough blocks\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\n  // [\\s\\S] matches _anything_ (newline or space)\n  // [^] is equivalent but doesn't work in IEs.\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\n      blocks = [],\n      m;\n\n  var line_no = 1;\n\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\n    // skip (but count) leading blank lines\n    line_no += count_lines( m[0] );\n    re.lastIndex = m[0].length;\n  }\n\n  while ( ( m = re.exec(input) ) !== null ) {\n    if (m[2] == \"\\n#\") {\n      m[2] = \"\\n\";\n      re.lastIndex--;\n    }\n    blocks.push( mk_block( m[1], m[2], line_no ) );\n    line_no += count_lines( m[0] );\n  }\n\n  return blocks;\n};\n\n/**\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\n *  - block (String): the block to process\n *  - next (Array): the following blocks\n *\n * Process `block` and return an array of JsonML nodes representing `block`.\n *\n * It does this by asking each block level function in the dialect to process\n * the block until one can. Succesful handling is indicated by returning an\n * array (with zero or more JsonML nodes), failure by a false value.\n *\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\n * themselves as appropriate.\n *\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\n * can adjust `next` in place using shift/splice etc.\n *\n * If any of this default behaviour is not right for the dialect, you can\n * define a `__call__` method on the dialect that will get invoked to handle\n * the block processing.\n */\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\n  var cbs = this.dialect.block,\n      ord = cbs.__order__;\n\n  if ( \"__call__\" in cbs ) {\n    return cbs.__call__.call(this, block, next);\n  }\n\n  for ( var i = 0; i < ord.length; i++ ) {\n    //D:this.debug( \"Testing\", ord[i] );\n    var res = cbs[ ord[i] ].call( this, block, next );\n    if ( res ) {\n      //D:this.debug(\"  matched\");\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\n        this.debug(ord[i], \"didn't return a proper array\");\n      //D:this.debug( \"\" );\n      return res;\n    }\n  }\n\n  // Uhoh! no match! Should we throw an error?\n  return [];\n};\n\nMarkdown.prototype.processInline = function processInline( block ) {\n  return this.dialect.inline.__call__.call( this, String( block ) );\n};\n\n/**\n *  Markdown#toTree( source ) -> JsonML\n *  - source (String): markdown source to parse\n *\n *  Parse `source` into a JsonML tree representing the markdown document.\n **/\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\n\n  // Make tree a member variable so its easier to mess with in extensions\n  var old_tree = this.tree;\n  try {\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\n\n    blocks:\n    while ( blocks.length ) {\n      var b = this.processBlock( blocks.shift(), blocks );\n\n      // Reference blocks and the like won't return any content\n      if ( !b.length ) continue blocks;\n\n      this.tree.push.apply( this.tree, b );\n    }\n    return this.tree;\n  }\n  finally {\n    if ( custom_root ) {\n      this.tree = old_tree;\n    }\n  }\n};\n\n// Noop by default\nMarkdown.prototype.debug = function () {\n  var args = Array.prototype.slice.call( arguments);\n  args.unshift(this.debug_indent);\n  if ( typeof print !== \"undefined\" )\n      print.apply( print, args );\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\n      console.log.apply( null, args );\n}\n\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\n  // Dont use /g regexps with this\n  var m,\n      b = block.valueOf();\n\n  while ( b.length && (m = re.exec(b) ) != null ) {\n    b = b.substr( m[0].length );\n    cb.call(this, m);\n  }\n  return b;\n};\n\n/**\n * Markdown.dialects\n *\n * Namespace of built-in dialects.\n **/\nMarkdown.dialects = {};\n\n/**\n * Markdown.dialects.Gruber\n *\n * The default dialect that follows the rules set out by John Gruber's\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\n * that script which in some places is not exactly what the syntax web page\n * says.\n **/\nMarkdown.dialects.Gruber = {\n  block: {\n    atxHeader: function atxHeader( block, next ) {\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var header = [ \"header\", { level: m[ 1 ].length } ];\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    setextHeader: function setextHeader( block, next ) {\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\n\n      if ( !m ) return undefined;\n\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\n\n      if ( m[0].length < block.length )\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\n\n      return [ header ];\n    },\n\n    code: function code( block, next ) {\n      // |    Foo\n      // |bar\n      // should be a code block followed by a paragraph. Fun\n      //\n      // There might also be adjacent code block to merge.\n\n      var ret = [],\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\n          lines;\n\n      // 4 spaces + content\n      if ( !block.match( re ) ) return undefined;\n\n      block_search:\n      do {\n        // Now pull out the rest of the lines\n        var b = this.loop_re_over_block(\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\n\n        if ( b.length ) {\n          // Case alluded to in first comment. push it back on as a new block\n          next.unshift( mk_block(b, block.trailing) );\n          break block_search;\n        }\n        else if ( next.length ) {\n          // Check the next block - it might be code too\n          if ( !next[0].match( re ) ) break block_search;\n\n          // Pull how how many blanks lines follow - minus two to account for .join\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\n\n          block = next.shift();\n        }\n        else {\n          break block_search;\n        }\n      } while ( true );\n\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\n    },\n\n    horizRule: function horizRule( block, next ) {\n      // this needs to find any hr in the block to handle abutting blocks\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\n\n      if ( !m ) {\n        return undefined;\n      }\n\n      var jsonml = [ [ \"hr\" ] ];\n\n      // if there's a leading abutting block, process it\n      if ( m[ 1 ] ) {\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\n      }\n\n      // if there's a trailing abutting block, stick it into next\n      if ( m[ 3 ] ) {\n        next.unshift( mk_block( m[ 3 ] ) );\n      }\n\n      return jsonml;\n    },\n\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\n    // between the items (and result in text just in the <li>) and loose lists,\n    // which have an empty line between list items, resulting in (one or more)\n    // paragraphs inside the <li>.\n    //\n    // There are all sorts weird edge cases about the original markdown.pl's\n    // handling of lists:\n    //\n    // * Nested lists are supposed to be indented by four chars per level. But\n    //   if they aren't, you can get a nested list by indenting by less than\n    //   four so long as the indent doesn't match an indent of an existing list\n    //   item in the 'nest stack'.\n    //\n    // * The type of the list (bullet or number) is controlled just by the\n    //    first item at the indent. Subsequent changes are ignored unless they\n    //    are for nested lists\n    //\n    lists: (function( ) {\n      // Use a closure to hide a few variables.\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\n          bullet_list = /[*+-]/,\n          number_list = /\\d+\\./,\n          // Capture leading indent as it matters for determining nested lists.\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\n\n      // TODO: Cache this regexp for certain depths.\n      // Create a regexp suitable for matching an li for a given stack depth\n      function regex_for_depth( depth ) {\n\n        return new RegExp(\n          // m[1] = indent, m[2] = list_type\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\n          // m[3] = cont\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\n        );\n      }\n      function expand_tab( input ) {\n        return input.replace( / {0,3}\\t/g, \"    \" );\n      }\n\n      // Add inline content `inline` to `li`. inline comes from processInline\n      // so is an array of content\n      function add(li, loose, inline, nl) {\n        if ( loose ) {\n          li.push( [ \"para\" ].concat(inline) );\n          return;\n        }\n        // Hmmm, should this be any block level element or just paras?\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\n                   ? li[li.length -1]\n                   : li;\n\n        // If there is already some content in this list, add the new line in\n        if ( nl && li.length > 1 ) inline.unshift(nl);\n\n        for ( var i = 0; i < inline.length; i++ ) {\n          var what = inline[i],\n              is_str = typeof what == \"string\";\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\n            add_to[ add_to.length-1 ] += what;\n          }\n          else {\n            add_to.push( what );\n          }\n        }\n      }\n\n      // contained means have an indent greater than the current one. On\n      // *every* line in the block\n      function get_contained_blocks( depth, blocks ) {\n\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\n            ret = [];\n\n        while ( blocks.length > 0 ) {\n          if ( re.exec( blocks[0] ) ) {\n            var b = blocks.shift(),\n                // Now remove that indent\n                x = b.replace( replace, \"\");\n\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\n          }\n          else {\n            break;\n          }\n        }\n        return ret;\n      }\n\n      // passed to stack.forEach to turn list items up the stack into paras\n      function paragraphify(s, i, stack) {\n        var list = s.list;\n        var last_li = list[list.length-1];\n\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\n          return;\n        }\n        if ( i + 1 == stack.length ) {\n          // Last stack frame\n          // Keep the same array, but replace the contents\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\n        }\n        else {\n          var sublist = last_li.pop();\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\n        }\n      }\n\n      // The matcher function\n      return function( block, next ) {\n        var m = block.match( is_list_re );\n        if ( !m ) return undefined;\n\n        function make_list( m ) {\n          var list = bullet_list.exec( m[2] )\n                   ? [\"bulletlist\"]\n                   : [\"numberlist\"];\n\n          stack.push( { list: list, indent: m[1] } );\n          return list;\n        }\n\n\n        var stack = [], // Stack of lists for nesting.\n            list = make_list( m ),\n            last_li,\n            loose = false,\n            ret = [ stack[0].list ],\n            i;\n\n        // Loop to search over block looking for inner block elements and loose lists\n        loose_search:\n        while ( true ) {\n          // Split into lines preserving new lines at end of line\n          var lines = block.split( /(?=\\n)/ );\n\n          // We have to grab all lines for a li and call processInline on them\n          // once as there are some inline things that can span lines.\n          var li_accumulate = \"\";\n\n          // Loop over the lines in this block looking for tight lists.\n          tight_search:\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\n            var nl = \"\",\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\n\n            // TODO: really should cache this\n            var line_re = regex_for_depth( stack.length );\n\n            m = l.match( line_re );\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\n\n            // We have a list item\n            if ( m[1] !== undefined ) {\n              // Process the previous list item, if any\n              if ( li_accumulate.length ) {\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\n                // Loose mode will have been dealt with. Reset it\n                loose = false;\n                li_accumulate = \"\";\n              }\n\n              m[1] = expand_tab( m[1] );\n              var wanted_depth = Math.floor(m[1].length/4)+1;\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\n              if ( wanted_depth > stack.length ) {\n                // Deep enough for a nested list outright\n                //print ( \"new nested list\" );\n                list = make_list( m );\n                last_li.push( list );\n                last_li = list[1] = [ \"listitem\" ];\n              }\n              else {\n                // We aren't deep enough to be strictly a new level. This is\n                // where Md.pl goes nuts. If the indent matches a level in the\n                // stack, put it there, else put it one deeper then the\n                // wanted_depth deserves.\n                var found = false;\n                for ( i = 0; i < stack.length; i++ ) {\n                  if ( stack[ i ].indent != m[1] ) continue;\n                  list = stack[ i ].list;\n                  stack.splice( i+1, stack.length - (i+1) );\n                  found = true;\n                  break;\n                }\n\n                if (!found) {\n                  //print(\"not found. l:\", uneval(l));\n                  wanted_depth++;\n                  if ( wanted_depth <= stack.length ) {\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\n                    list = stack[wanted_depth-1].list;\n                    //print(\"list:\", uneval(list) );\n                  }\n                  else {\n                    //print (\"made new stack for messy indent\");\n                    list = make_list(m);\n                    last_li.push(list);\n                  }\n                }\n\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\n                last_li = [ \"listitem\" ];\n                list.push(last_li);\n              } // end depth of shenegains\n              nl = \"\";\n            }\n\n            // Add content\n            if ( l.length > m[0].length ) {\n              li_accumulate += nl + l.substr( m[0].length );\n            }\n          } // tight_search\n\n          if ( li_accumulate.length ) {\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\n            // Loose mode will have been dealt with. Reset it\n            loose = false;\n            li_accumulate = \"\";\n          }\n\n          // Look at the next block - we might have a loose list. Or an extra\n          // paragraph for the current li\n          var contained = get_contained_blocks( stack.length, next );\n\n          // Deal with code blocks or properly nested lists\n          if ( contained.length > 0 ) {\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\n          }\n\n          var next_block = next[0] && next[0].valueOf() || \"\";\n\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\n            block = next.shift();\n\n            // Check for an HR following a list: features/lists/hr_abutting\n            var hr = this.dialect.block.horizRule( block, next );\n\n            if ( hr ) {\n              ret.push.apply(ret, hr);\n              break;\n            }\n\n            // Make sure all listitems up the stack are paragraphs\n            forEach( stack, paragraphify, this);\n\n            loose = true;\n            continue loose_search;\n          }\n          break;\n        } // loose_search\n\n        return ret;\n      };\n    })(),\n\n    blockquote: function blockquote( block, next ) {\n      if ( !block.match( /^>/m ) )\n        return undefined;\n\n      var jsonml = [];\n\n      // separate out the leading abutting block, if any. I.e. in this case:\n      //\n      //  a\n      //  > b\n      //\n      if ( block[ 0 ] != \">\" ) {\n        var lines = block.split( /\\n/ ),\n            prev = [],\n            line_no = block.lineNumber;\n\n        // keep shifting lines until you find a crotchet\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\n            prev.push( lines.shift() );\n            line_no++;\n        }\n\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\n        // reassemble new block of just block quotes!\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\n      }\n\n\n      // if the next block is also a blockquote merge it in\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\n        var b = next.shift();\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\n      }\n\n      // Strip off the leading \"> \" and re-process as a block.\n      var input = block.replace( /^> ?/gm, \"\" ),\n          old_tree = this.tree,\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\n          attr = extract_attr( processedBlock );\n\n      // If any link references were found get rid of them\n      if ( attr && attr.references ) {\n        delete attr.references;\n        // And then remove the attribute object if it's empty\n        if ( isEmpty( attr ) ) {\n          processedBlock.splice( 1, 1 );\n        }\n      }\n\n      jsonml.push( processedBlock );\n      return jsonml;\n    },\n\n    referenceDefn: function referenceDefn( block, next) {\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\n      // interesting matches are [ , ref_id, url, , title, title ]\n\n      if ( !block.match(re) )\n        return undefined;\n\n      // make an attribute node if it doesn't exist\n      if ( !extract_attr( this.tree ) ) {\n        this.tree.splice( 1, 0, {} );\n      }\n\n      var attrs = extract_attr( this.tree );\n\n      // make a references hash if it doesn't exist\n      if ( attrs.references === undefined ) {\n        attrs.references = {};\n      }\n\n      var b = this.loop_re_over_block(re, block, function( m ) {\n\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\n          href: m[2]\n        };\n\n        if ( m[4] !== undefined )\n          ref.title = m[4];\n        else if ( m[5] !== undefined )\n          ref.title = m[5];\n\n      } );\n\n      if ( b.length )\n        next.unshift( mk_block( b, block.trailing ) );\n\n      return [];\n    },\n\n    para: function para( block, next ) {\n      // everything's a para!\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\n    }\n  }\n};\n\nMarkdown.dialects.Gruber.inline = {\n\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\n      var m,\n          res,\n          lastIndex = 0;\n\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\n\n      m = re.exec( text );\n      if (!m) {\n        // Just boring text\n        return [ text.length, text ];\n      }\n      else if ( m[1] ) {\n        // Some un-interesting text matched. Return that first\n        return [ m[1].length, m[1] ];\n      }\n\n      var res;\n      if ( m[2] in this.dialect.inline ) {\n        res = this.dialect.inline[ m[2] ].call(\n                  this,\n                  text.substr( m.index ), m, previous_nodes || [] );\n      }\n      // Default for now to make dev easier. just slurp special and output it.\n      res = res || [ m[2].length, m[2] ];\n      return res;\n    },\n\n    __call__: function inline( text, patterns ) {\n\n      var out = [],\n          res;\n\n      function add(x) {\n        //D:self.debug(\"  adding output\", uneval(x));\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\n          out[ out.length-1 ] += x;\n        else\n          out.push(x);\n      }\n\n      while ( text.length > 0 ) {\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\n        text = text.substr( res.shift() );\n        forEach(res, add )\n      }\n\n      return out;\n    },\n\n    // These characters are intersting elsewhere, so have rules for them so that\n    // chunks of plain text blocks don't include them\n    \"]\": function () {},\n    \"}\": function () {},\n\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\n\n    \"\\\\\": function escaped( text ) {\n      // [ length of input processed, node/children to add... ]\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\n      if ( this.dialect.inline.__escape__.exec( text ) )\n        return [ 2, text.charAt( 1 ) ];\n      else\n        // Not an esacpe\n        return [ 1, \"\\\\\" ];\n    },\n\n    \"![\": function image( text ) {\n\n      // Unlike images, alt text is plain text only. no other elements are\n      // allowed in there\n\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\n      //      1          2            3       4         <--- captures\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\n\n      if ( m ) {\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\n          m[2] = m[2].substring( 1, m[2].length - 1 );\n\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\n\n        var attrs = { alt: m[1], href: m[2] || \"\" };\n        if ( m[4] !== undefined)\n          attrs.title = m[4];\n\n        return [ m[0].length, [ \"img\", attrs ] ];\n      }\n\n      // ![Alt text][id]\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\n\n      if ( m ) {\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\n      }\n\n      // Just consume the '!['\n      return [ 2, \"![\" ];\n    },\n\n    \"[\": function link( text ) {\n\n      var orig = String(text);\n      // Inline content is possible inside `link text`\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\n\n      // No closing ']' found. Just consume the [\n      if ( !res ) return [ 1, \"[\" ];\n\n      var consumed = 1 + res[ 0 ],\n          children = res[ 1 ],\n          link,\n          attrs;\n\n      // At this point the first [...] has been parsed. See what follows to find\n      // out which kind of link we are (reference or direct url)\n      text = text.substr( consumed );\n\n      // [link text](/path/to/img.jpg \"Optional title\")\n      //                 1            2       3         <--- captures\n      // This will capture up to the last paren in the block. We then pull\n      // back based on if there a matching ones in the url\n      //    ([here](/url/(test))\n      // The parens have to be balanced\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\n      if ( m ) {\n        var url = m[1];\n        consumed += m[0].length;\n\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\n          url = url.substring( 1, url.length - 1 );\n\n        // If there is a title we don't have to worry about parens in the url\n        if ( !m[3] ) {\n          var open_parens = 1; // One open that isn't in the capture\n          for ( var len = 0; len < url.length; len++ ) {\n            switch ( url[len] ) {\n            case \"(\":\n              open_parens++;\n              break;\n            case \")\":\n              if ( --open_parens == 0) {\n                consumed -= url.length - len;\n                url = url.substring(0, len);\n              }\n              break;\n            }\n          }\n        }\n\n        // Process escapes only\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\n\n        attrs = { href: url || \"\" };\n        if ( m[3] !== undefined)\n          attrs.title = m[3];\n\n        link = [ \"link\", attrs ].concat( children );\n        return [ consumed, link ];\n      }\n\n      // [Alt text][id]\n      // [Alt text] [id]\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\n\n      if ( m ) {\n\n        consumed += m[ 0 ].length;\n\n        // [links][] uses links as its reference\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\n\n        link = [ \"link_ref\", attrs ].concat( children );\n\n        // We can't check if the reference is known here as it likely wont be\n        // found till after. Check it in md tree->hmtl tree conversion.\n        // Store the original so that conversion can revert if the ref isn't found.\n        return [ consumed, link ];\n      }\n\n      // [id]\n      // Only if id is plain (no formatting.)\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\n\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\n        link = [ \"link_ref\", attrs, children[0] ];\n        return [ consumed, link ];\n      }\n\n      // Just consume the \"[\"\n      return [ 1, \"[\" ];\n    },\n\n\n    \"<\": function autoLink( text ) {\n      var m;\n\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\n        if ( m[3] ) {\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\n\n        }\n        else if ( m[2] == \"mailto\" ) {\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\n        }\n        else\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\n      }\n\n      return [ 1, \"<\" ];\n    },\n\n    \"`\": function inlineCode( text ) {\n      // Inline code block. as many backticks as you like to start it\n      // Always skip over the opening ticks.\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\n\n      if ( m && m[2] )\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\n      else {\n        // TODO: No matching end code found - warn!\n        return [ 1, \"`\" ];\n      }\n    },\n\n    \"  \\n\": function lineBreak( text ) {\n      return [ 3, [ \"linebreak\" ] ];\n    }\n\n};\n\n// Meta Helper/generator method for em and strong handling\nfunction strong_em( tag, md ) {\n\n  var state_slot = tag + \"_state\",\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\n\n  function CloseTag(len) {\n    this.len_after = len;\n    this.name = \"close_\" + md;\n  }\n\n  return function ( text, orig_match ) {\n\n    if ( this[state_slot][0] == md ) {\n      // Most recent em is of this type\n      //D:this.debug(\"closing\", md);\n      this[state_slot].shift();\n\n      // \"Consume\" everything to go back to the recrusion in the else-block below\n      return[ text.length, new CloseTag(text.length-md.length) ];\n    }\n    else {\n      // Store a clone of the em/strong states\n      var other = this[other_slot].slice(),\n          state = this[state_slot].slice();\n\n      this[state_slot].unshift(md);\n\n      //D:this.debug_indent += \"  \";\n\n      // Recurse\n      var res = this.processInline( text.substr( md.length ) );\n      //D:this.debug_indent = this.debug_indent.substr(2);\n\n      var last = res[res.length - 1];\n\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\n\n      var check = this[state_slot].shift();\n      if ( last instanceof CloseTag ) {\n        res.pop();\n        // We matched! Huzzah.\n        var consumed = text.length - last.len_after;\n        return [ consumed, [ tag ].concat(res) ];\n      }\n      else {\n        // Restore the state of the other kind. We might have mistakenly closed it.\n        this[other_slot] = other;\n        this[state_slot] = state;\n\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\n        return [ md.length, md ];\n      }\n    }\n  }; // End returned function\n}\n\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\n\n\n// Build default order from insertion order.\nMarkdown.buildBlockOrder = function(d) {\n  var ord = [];\n  for ( var i in d ) {\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\n    ord.push( i );\n  }\n  d.__order__ = ord;\n};\n\n// Build patterns for inline matcher\nMarkdown.buildInlinePatterns = function(d) {\n  var patterns = [];\n\n  for ( var i in d ) {\n    // __foo__ is reserved and not a pattern\n    if ( i.match( /^__.*__$/) ) continue;\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\n             .replace( /\\n/, \"\\\\n\" );\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\n  }\n\n  patterns = patterns.join(\"|\");\n  d.__patterns__ = patterns;\n  //print(\"patterns:\", uneval( patterns ) );\n\n  var fn = d.__call__;\n  d.__call__ = function(text, pattern) {\n    if ( pattern != undefined ) {\n      return fn.call(this, text, pattern);\n    }\n    else\n    {\n      return fn.call(this, text, patterns);\n    }\n  };\n};\n\nMarkdown.DialectHelpers = {};\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\n  var consumed = 0,\n      nodes = [];\n\n  while ( true ) {\n    if ( text.charAt( consumed ) == want ) {\n      // Found the character we were looking for\n      consumed++;\n      return [ consumed, nodes ];\n    }\n\n    if ( consumed >= text.length ) {\n      // No closing char found. Abort.\n      return null;\n    }\n\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\n    consumed += res[ 0 ];\n    // Add any returned nodes.\n    nodes.push.apply( nodes, res.slice( 1 ) );\n  }\n}\n\n// Helper function to make sub-classing a dialect easier\nMarkdown.subclassDialect = function( d ) {\n  function Block() {}\n  Block.prototype = d.block;\n  function Inline() {}\n  Inline.prototype = d.inline;\n\n  return { block: new Block(), inline: new Inline() };\n};\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\n\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\n\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\n  var meta = split_meta_hash( meta_string ),\n      attr = {};\n\n  for ( var i = 0; i < meta.length; ++i ) {\n    // id: #foo\n    if ( /^#/.test( meta[ i ] ) ) {\n      attr.id = meta[ i ].substring( 1 );\n    }\n    // class: .foo\n    else if ( /^\\./.test( meta[ i ] ) ) {\n      // if class already exists, append the new one\n      if ( attr[\"class\"] ) {\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\n      }\n      else {\n        attr[\"class\"] = meta[ i ].substring( 1 );\n      }\n    }\n    // attribute: foo=bar\n    else if ( /\\=/.test( meta[ i ] ) ) {\n      var s = meta[ i ].split( /\\=/ );\n      attr[ s[ 0 ] ] = s[ 1 ];\n    }\n  }\n\n  return attr;\n}\n\nfunction split_meta_hash( meta_string ) {\n  var meta = meta_string.split( \"\" ),\n      parts = [ \"\" ],\n      in_quotes = false;\n\n  while ( meta.length ) {\n    var letter = meta.shift();\n    switch ( letter ) {\n      case \" \" :\n        // if we're in a quoted section, keep it\n        if ( in_quotes ) {\n          parts[ parts.length - 1 ] += letter;\n        }\n        // otherwise make a new part\n        else {\n          parts.push( \"\" );\n        }\n        break;\n      case \"'\" :\n      case '\"' :\n        // reverse the quotes and move straight on\n        in_quotes = !in_quotes;\n        break;\n      case \"\\\\\" :\n        // shift off the next letter to be used straight away.\n        // it was escaped so we'll keep it whatever it is\n        letter = meta.shift();\n      default :\n        parts[ parts.length - 1 ] += letter;\n        break;\n    }\n  }\n\n  return parts;\n}\n\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\n  // we're only interested in the first block\n  if ( block.lineNumber > 1 ) return undefined;\n\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\n\n  // make an attribute node if it doesn't exist\n  if ( !extract_attr( this.tree ) ) {\n    this.tree.splice( 1, 0, {} );\n  }\n\n  var pairs = block.split( /\\n/ );\n  for ( p in pairs ) {\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\n        key = m[ 1 ].toLowerCase(),\n        value = m[ 2 ];\n\n    this.tree[ 1 ][ key ] = value;\n  }\n\n  // document_meta produces no content!\n  return [];\n};\n\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\n  // check if the last line of the block is an meta hash\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\n  if ( !m ) return undefined;\n\n  // process the meta hash\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\n\n  var hash;\n\n  // if we matched ^ then we need to apply meta to the previous block\n  if ( m[ 1 ] === \"\" ) {\n    var node = this.tree[ this.tree.length - 1 ];\n    hash = extract_attr( node );\n\n    // if the node is a string (rather than JsonML), bail\n    if ( typeof node === \"string\" ) return undefined;\n\n    // create the attribute hash if it doesn't exist\n    if ( !hash ) {\n      hash = {};\n      node.splice( 1, 0, hash );\n    }\n\n    // add the attributes in\n    for ( a in attr ) {\n      hash[ a ] = attr[ a ];\n    }\n\n    // return nothing so the meta hash is removed\n    return [];\n  }\n\n  // pull the meta hash off the block and process what's left\n  var b = block.replace( /\\n.*$/, \"\" ),\n      result = this.processBlock( b, [] );\n\n  // get or make the attributes hash\n  hash = extract_attr( result[ 0 ] );\n  if ( !hash ) {\n    hash = {};\n    result[ 0 ].splice( 1, 0, hash );\n  }\n\n  // attach the attributes to the block\n  for ( a in attr ) {\n    hash[ a ] = attr[ a ];\n  }\n\n  return result;\n};\n\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\n  // one or more terms followed by one or more definitions, in a single block\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\n      list = [ \"dl\" ],\n      i, m;\n\n  // see if we're dealing with a tight or loose block\n  if ( ( m = block.match( tight ) ) ) {\n    // pull subsequent tight DL blocks out of `next`\n    var blocks = [ block ];\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\n      blocks.push( next.shift() );\n    }\n\n    for ( var b = 0; b < blocks.length; ++b ) {\n      var m = blocks[ b ].match( tight ),\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\n          defns = m[ 2 ].split( /\\n:\\s+/ );\n\n      // print( uneval( m ) );\n\n      for ( i = 0; i < terms.length; ++i ) {\n        list.push( [ \"dt\", terms[ i ] ] );\n      }\n\n      for ( i = 0; i < defns.length; ++i ) {\n        // run inline processing over the definition\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\n      }\n    }\n  }\n  else {\n    return undefined;\n  }\n\n  return [ list ];\n};\n\n// splits on unescaped instances of @ch. If @ch is not a character the result\n// can be unpredictable\n\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\n\n    var _split_on_unescaped = function(s, ch) {\n        ch = ch || '\\\\s';\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\n        var res = [ ],\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\n            m;\n        while(m = s.match(r)) {\n            res.push(m[1]);\n            s = m[2];\n        }\n        res.push(s);\n        return res;\n    }\n\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        // find at least an unescaped pipe in each line\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\n        i, m;\n    if (m = block.match(leading_pipe)) {\n        // remove leading pipes in contents\n        // (header and horizontal rule already have the leading pipe left out)\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\n    } else if (! ( m = block.match(no_leading_pipe))) {\n        return undefined;\n    }\n\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\n\n    // remove trailing pipes, then split on pipes\n    // (no escaped pipes are allowed in horizontal rule)\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\n\n    // process alignment\n    var html_attrs = [ ];\n    forEach (m[2], function (s) {\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\n        else                              html_attrs.push({});\n    });\n\n    // now for the header, avoid escaped pipes\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\n    for (i = 0; i < m[1].length; i++) {\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\n            this.processInline(m[1][i].trim())));\n    }\n\n    // now for body contents\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\n        var html_row = ['tr'];\n        row = _split_on_unescaped(row, '|');\n        for (i = 0; i < row.length; i++) {\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\n        }\n        table[2].push(html_row);\n    }, this);\n\n    return [table];\n}\n\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\n  if ( !out.length ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // get the preceeding element\n  var before = out[ out.length - 1 ];\n\n  if ( typeof before === \"string\" ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // match a meta hash\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\n\n  // no match, false alarm\n  if ( !m ) {\n    return [ 2, \"{:\" ];\n  }\n\n  // attach the attributes to the preceeding element\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\n      attr = extract_attr( before );\n\n  if ( !attr ) {\n    attr = {};\n    before.splice( 1, 0, attr );\n  }\n\n  for ( var k in meta ) {\n    attr[ k ] = meta[ k ];\n  }\n\n  // cut out the string and replace it with nothing\n  return [ m[ 0 ].length, \"\" ];\n};\n\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\n\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\n\nvar isArray = Array.isArray || function(obj) {\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\n};\n\nvar forEach;\n// Don't mess with Array.prototype. Its not friendly\nif ( Array.prototype.forEach ) {\n  forEach = function( arr, cb, thisp ) {\n    return arr.forEach( cb, thisp );\n  };\n}\nelse {\n  forEach = function(arr, cb, thisp) {\n    for (var i = 0; i < arr.length; i++) {\n      cb.call(thisp || arr, arr[i], i, arr);\n    }\n  }\n}\n\nvar isEmpty = function( obj ) {\n  for ( var key in obj ) {\n    if ( hasOwnProperty.call( obj, key ) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction extract_attr( jsonml ) {\n  return isArray(jsonml)\n      && jsonml.length > 1\n      && typeof jsonml[ 1 ] === \"object\"\n      && !( isArray(jsonml[ 1 ]) )\n      ? jsonml[ 1 ]\n      : undefined;\n}\n\n\n\n/**\n *  renderJsonML( jsonml[, options] ) -> String\n *  - jsonml (Array): JsonML array to render to XML\n *  - options (Object): options\n *\n *  Converts the given JsonML into well-formed XML.\n *\n *  The options currently understood are:\n *\n *  - root (Boolean): wether or not the root node should be included in the\n *    output, or just its children. The default `false` is to not include the\n *    root itself.\n */\nexpose.renderJsonML = function( jsonml, options ) {\n  options = options || {};\n  // include the root element in the rendered output?\n  options.root = options.root || false;\n\n  var content = [];\n\n  if ( options.root ) {\n    content.push( render_tree( jsonml ) );\n  }\n  else {\n    jsonml.shift(); // get rid of the tag\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n      jsonml.shift(); // get rid of the attributes\n    }\n\n    while ( jsonml.length ) {\n      content.push( render_tree( jsonml.shift() ) );\n    }\n  }\n\n  return content.join( \"\\n\\n\" );\n};\n\nfunction escapeHTML( text ) {\n  return text.replace( /&/g, \"&amp;\" )\n             .replace( /</g, \"&lt;\" )\n             .replace( />/g, \"&gt;\" )\n             .replace( /\"/g, \"&quot;\" )\n             .replace( /'/g, \"&#39;\" );\n}\n\nfunction render_tree( jsonml ) {\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return escapeHTML( jsonml );\n  }\n\n  var tag = jsonml.shift(),\n      attributes = {},\n      content = [];\n\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\n    attributes = jsonml.shift();\n  }\n\n  while ( jsonml.length ) {\n    content.push( render_tree( jsonml.shift() ) );\n  }\n\n  var tag_attrs = \"\";\n  for ( var a in attributes ) {\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\n  }\n\n  // be careful about adding whitespace here for inline elements\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\n    return \"<\"+ tag + tag_attrs + \"/>\";\n  }\n  else {\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\n  }\n}\n\nfunction convert_tree_to_html( tree, references, options ) {\n  var i;\n  options = options || {};\n\n  // shallow clone\n  var jsonml = tree.slice( 0 );\n\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\n      jsonml = options.preprocessTreeNode(jsonml, references);\n  }\n\n  // Clone attributes if they exist\n  var attrs = extract_attr( jsonml );\n  if ( attrs ) {\n    jsonml[ 1 ] = {};\n    for ( i in attrs ) {\n      jsonml[ 1 ][ i ] = attrs[ i ];\n    }\n    attrs = jsonml[ 1 ];\n  }\n\n  // basic case\n  if ( typeof jsonml === \"string\" ) {\n    return jsonml;\n  }\n\n  // convert this node\n  switch ( jsonml[ 0 ] ) {\n    case \"header\":\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\n      delete jsonml[ 1 ].level;\n      break;\n    case \"bulletlist\":\n      jsonml[ 0 ] = \"ul\";\n      break;\n    case \"numberlist\":\n      jsonml[ 0 ] = \"ol\";\n      break;\n    case \"listitem\":\n      jsonml[ 0 ] = \"li\";\n      break;\n    case \"para\":\n      jsonml[ 0 ] = \"p\";\n      break;\n    case \"markdown\":\n      jsonml[ 0 ] = \"html\";\n      if ( attrs ) delete attrs.references;\n      break;\n    case \"code_block\":\n      jsonml[ 0 ] = \"pre\";\n      i = attrs ? 2 : 1;\n      var code = [ \"code\" ];\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\n      jsonml[ i ] = code;\n      break;\n    case \"inlinecode\":\n      jsonml[ 0 ] = \"code\";\n      break;\n    case \"img\":\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\n      delete jsonml[ 1 ].href;\n      break;\n    case \"linebreak\":\n      jsonml[ 0 ] = \"br\";\n    break;\n    case \"link\":\n      jsonml[ 0 ] = \"a\";\n      break;\n    case \"link_ref\":\n      jsonml[ 0 ] = \"a\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.href = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n    case \"img_ref\":\n      jsonml[ 0 ] = \"img\";\n\n      // grab this ref and clean up the attribute node\n      var ref = references[ attrs.ref ];\n\n      // if the reference exists, make the link\n      if ( ref ) {\n        delete attrs.ref;\n\n        // add in the href and title, if present\n        attrs.src = ref.href;\n        if ( ref.title ) {\n          attrs.title = ref.title;\n        }\n\n        // get rid of the unneeded original text\n        delete attrs.original;\n      }\n      // the reference doesn't exist, so revert to plain text\n      else {\n        return attrs.original;\n      }\n      break;\n  }\n\n  // convert all the children\n  i = 1;\n\n  // deal with the attribute node, if it exists\n  if ( attrs ) {\n    // if there are keys, skip over it\n    for ( var key in jsonml[ 1 ] ) {\n        i = 2;\n        break;\n    }\n    // if there aren't, remove it\n    if ( i === 1 ) {\n      jsonml.splice( i, 1 );\n    }\n  }\n\n  for ( ; i < jsonml.length; ++i ) {\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\n  }\n\n  return jsonml;\n}\n\n\n// merges adjacent text nodes into a single node\nfunction merge_text_nodes( jsonml ) {\n  // skip the tag name and attribute hash\n  var i = extract_attr( jsonml ) ? 2 : 1;\n\n  while ( i < jsonml.length ) {\n    // if it's a string check the next item too\n    if ( typeof jsonml[ i ] === \"string\" ) {\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\n        // merge the second string into the first and remove it\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\n      }\n      else {\n        ++i;\n      }\n    }\n    // if it's not a string recurse\n    else {\n      merge_text_nodes( jsonml[ i ] );\n      ++i;\n    }\n  }\n}\n\n} )( (function() {\n  if ( typeof exports === \"undefined\" ) {\n    window.markdown = {};\n    return window.markdown;\n  }\n  else {\n    return exports;\n  }\n} )() );\n"]},"metadata":{},"sourceType":"script"}