{"ast":null,"code":"/*:: type Attr = { [key: string]: string | number } */\n\n/*:: type Opts = { preserveNumbers: ?boolean } */\n\n/*\n\nstyle-attr\n====\n\nVery simple parsing and stringifying of style attributes.\n\n`parse`\n----\n\nConvert a style attribute string to an object.\n\n*/\n\n/*:: declare function parse (raw: string, opts: ?Opts): Attr */\nfunction parse(raw, opts) {\n  opts = opts || {};\n  var preserveNumbers = opts.preserveNumbers;\n\n  var trim = function (s) {\n    return s.trim();\n  };\n\n  var obj = {};\n  getKeyValueChunks(raw).map(trim).filter(Boolean).forEach(function (item) {\n    // split with `.indexOf` rather than `.split` because the value may also contain colons.\n    var pos = item.indexOf(':');\n    var key = item.substr(0, pos).trim();\n    var val = item.substr(pos + 1).trim();\n\n    if (preserveNumbers && isNumeric(val)) {\n      val = Number(val);\n    }\n\n    obj[key] = val;\n  });\n  return obj;\n}\n/*\n\n`isNumeric`\n----\n\nCheck if a value is numeric.\nVia: https://stackoverflow.com/a/1830844/9324\n\n*/\n\n/*:: declare function isNumeric (n: any): boolean */\n\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/*\n\n`getKeyValueChunks`\n----\n\nSplit a string into chunks matching `<key>: <value>`\n\n*/\n\n/*:: declare function getKeyValueChunks (raw: string): Array<string> */\n\n\nfunction getKeyValueChunks(raw) {\n  var chunks = [];\n  var offset = 0;\n  var sep = ';';\n  var hasUnclosedUrl = /url\\([^\\)]+$/;\n  var chunk = '';\n  var nextSplit;\n\n  while (offset < raw.length) {\n    nextSplit = raw.indexOf(sep, offset);\n\n    if (nextSplit === -1) {\n      nextSplit = raw.length;\n    }\n\n    chunk += raw.substring(offset, nextSplit); // data URIs can contain semicolons, so make sure we get the whole thing\n\n    if (hasUnclosedUrl.test(chunk)) {\n      chunk += ';';\n      offset = nextSplit + 1;\n      continue;\n    }\n\n    chunks.push(chunk);\n    chunk = '';\n    offset = nextSplit + 1;\n  }\n\n  return chunks;\n}\n/*\n\n`stringify`\n----\n\nConvert an object into an attribute string\n\n*/\n\n/*:: declare function stringify (obj: Attr): string */\n\n\nfunction stringify(obj) {\n  return Object.keys(obj).map(function (key) {\n    return key + ':' + obj[key];\n  }).join(';');\n}\n/*\n\n`normalize`\n----\n\nNormalize an attribute string (eg. collapse duplicates)\n\n*/\n\n/*:: declare function normalize (str: string, opts: ?Opts): string */\n\n\nfunction normalize(str, opts) {\n  return stringify(parse(str, opts));\n}\n\nmodule.exports.parse = parse;\nmodule.exports.stringify = stringify;\nmodule.exports.normalize = normalize;","map":{"version":3,"sources":["C:/Users/dofla/Desktop/Stage/propaganda/node_modules/style-attr/lib/index.js"],"names":["parse","raw","opts","preserveNumbers","trim","s","obj","getKeyValueChunks","map","filter","Boolean","forEach","item","pos","indexOf","key","substr","val","isNumeric","Number","n","isNaN","parseFloat","isFinite","chunks","offset","sep","hasUnclosedUrl","chunk","nextSplit","length","substring","test","push","stringify","Object","keys","join","normalize","str","module","exports"],"mappings":"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","sourcesContent":["\n\n/*:: type Attr = { [key: string]: string | number } */\n/*:: type Opts = { preserveNumbers: ?boolean } */\n\n/*\n\nstyle-attr\n====\n\nVery simple parsing and stringifying of style attributes.\n\n`parse`\n----\n\nConvert a style attribute string to an object.\n\n*/\n\n/*:: declare function parse (raw: string, opts: ?Opts): Attr */\nfunction parse(raw, opts) {\n  opts = opts || {};\n\n  var preserveNumbers = opts.preserveNumbers;\n  var trim = function (s) {\n    return s.trim();\n  };\n  var obj = {};\n\n  getKeyValueChunks(raw).map(trim).filter(Boolean).forEach(function (item) {\n    // split with `.indexOf` rather than `.split` because the value may also contain colons.\n    var pos = item.indexOf(':');\n    var key = item.substr(0, pos).trim();\n    var val = item.substr(pos + 1).trim();\n    if (preserveNumbers && isNumeric(val)) {\n      val = Number(val);\n    }\n\n    obj[key] = val;\n  });\n\n  return obj;\n}\n\n/*\n\n`isNumeric`\n----\n\nCheck if a value is numeric.\nVia: https://stackoverflow.com/a/1830844/9324\n\n*/\n\n/*:: declare function isNumeric (n: any): boolean */\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/*\n\n`getKeyValueChunks`\n----\n\nSplit a string into chunks matching `<key>: <value>`\n\n*/\n/*:: declare function getKeyValueChunks (raw: string): Array<string> */\nfunction getKeyValueChunks(raw) {\n  var chunks = [];\n  var offset = 0;\n  var sep = ';';\n  var hasUnclosedUrl = /url\\([^\\)]+$/;\n  var chunk = '';\n  var nextSplit;\n  while (offset < raw.length) {\n    nextSplit = raw.indexOf(sep, offset);\n    if (nextSplit === -1) {\n      nextSplit = raw.length;\n    }\n\n    chunk += raw.substring(offset, nextSplit);\n\n    // data URIs can contain semicolons, so make sure we get the whole thing\n    if (hasUnclosedUrl.test(chunk)) {\n      chunk += ';';\n      offset = nextSplit + 1;\n      continue;\n    }\n\n    chunks.push(chunk);\n    chunk = '';\n    offset = nextSplit + 1;\n  }\n\n  return chunks;\n}\n\n/*\n\n`stringify`\n----\n\nConvert an object into an attribute string\n\n*/\n/*:: declare function stringify (obj: Attr): string */\nfunction stringify(obj) {\n  return Object.keys(obj).map(function (key) {\n    return key + ':' + obj[key];\n  }).join(';');\n}\n\n/*\n\n`normalize`\n----\n\nNormalize an attribute string (eg. collapse duplicates)\n\n*/\n/*:: declare function normalize (str: string, opts: ?Opts): string */\nfunction normalize(str, opts) {\n  return stringify(parse(str, opts));\n}\n\nmodule.exports.parse = parse;\nmodule.exports.stringify = stringify;\nmodule.exports.normalize = normalize;"]},"metadata":{},"sourceType":"script"}