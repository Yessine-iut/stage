{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dofla\\\\Desktop\\\\Stage\\\\propaganda\\\\src\\\\pages\\\\service2_1.js\";\nimport React from 'react'; //import {Reponse} from '../components/textInput'\n\nimport data from \"../json/jsonmockV4.json\";\nimport Button from '../components/button';\nimport Multiplechkbox from '../components/MultipleChkbox';\nimport { Link } from \"react-router-dom\";\nimport WordCloud from 'react-d3-cloud';\nimport Cloud from 'react-wordcloud';\nimport \"tippy.js/dist/tippy.css\";\nimport \"tippy.js/animations/scale.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet word = [{\n  text: 'Hey',\n  value: 1000\n}, {\n  text: 'lol',\n  value: 200\n}, {\n  text: 'first impression',\n  value: 800\n}, {\n  text: 'very cool',\n  value: 1000000\n}, {\n  text: 'duck',\n  value: 10\n}];\n\nconst fontSizeMapper = word => Math.log2(word.value) * 5; //const rotate = word => word.value % 360;\n\n\nconst Service2_1 = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(word), /*#__PURE__*/_jsxDEV(WordCloud, {\n      data: word,\n      fontSizeMapper: fontSizeMapper // rotate={rotate}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 1\n    }, this), \"  \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Service2_1;\n\nfunction Datacloud() {\n  let propagandas = [\"Appeal_to_Authority\", \"Appeal_to_fear-prejudice\", \"Bandwagon,Reductio_ad_hitlerum\", \"Black-and-White_Fallacy\", \"Causal_Oversimplification\", \"Doubt\", \"Exaggeration,Minimisation\", \"Flag-Waving\", \"Loaded_Language\", \"Name_Calling,Labeling\", \"Repetition\", \"Slogans\", \"Thought-terminating_Cliches\", \"Whataboutism,Straw_Men,Red_Herring\"];\n  let spans = [];\n  let res = []; // let taillePropaganda=0;\n\n  let tailleSpan = 0;\n  let text = \"\";\n\n  for (let i in data.article701225819) {\n    for (let j in data.article701225819[i]) {\n      if (j !== 'text') {\n        /*console.log(\"type of \"+typeof(data.article701225819[i][j].label))\r\n        console.log(\"texte \"+data.article701225819[i][j].span)\r\n        console.log(\"i \"+i)\r\n        console.log(\"j \"+j+1)*/\n        if (typeof data.article701225819[i][j].label !== 'object') {\n          // console.log(\"test\")\n          if (data.article701225819[i][j].label !== 0) {\n            let spanCourant = {};\n            spanCourant.text = data.article701225819[i][j].span;\n            spanCourant.value = data.article701225819[i][j].probability; //spanCourant.label=data.article701225819[i][j].label;\n\n            spans.push(spanCourant);\n          }\n        } else {\n          for (let v = 0; v < data.article701225819[i][j].label.length; v++) {\n            let spanCourant = {};\n            spanCourant.text = data.article701225819[i].text.substring(data.article701225819[i][j].start_char[v], data.article701225819[i][j].end_index[v]);\n            spanCourant.value = data.article701225819[i][j].probability[v]; //spanCourant.label=data.article701225819[i][j].label[v];\n\n            spans.push(spanCourant);\n          }\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < spans.length; i++) {\n    console.log(\"SPANS \" + spans[i].span);\n  }\n\n  console.log(\"SPANS \" + spans);\n  console.log(\"SPANS \" + JSON.stringify(spans));\n  let l = JSON.stringify(spans);\n  let word = JSON.Array(spans);\n  return word; // console.log(data.article701225819[propagandas[0]][\"span_1\"].probability);\n  //console.log(data[0].span_1)\n}\n/*function SimpleWordcloud() {\r\n  const words = [\r\n    {\r\n      text: 'told',\r\n      value: 640,\r\n    },\r\n    {\r\n      text: 'mistake',\r\n      value: 700,\r\n    },\r\n    {\r\n      text: 'thought',\r\n      value: 890,\r\n    },\r\n    {\r\n      text: 'bad',\r\n      value: 1090,\r\n    },\r\n  ]\r\n  const callbacks = {\r\n    getWordColor: word => word.value > 50 ? \"blue\" : \"red\",\r\n    onWordClick: console.log,\r\n    onWordMouseOver: console.log,\r\n    getWordTooltip: word => `${word.text} (${word.value}) [${word.value > 50 ? \"good\" : \"bad\"}]`,\r\n  }\r\n  const options = {\r\n    rotations: 2,\r\n    rotationAngles: [-90, 0],\r\n  };\r\n  //const size = [600, 400];\r\n   \r\n  \r\n  //let words=Datacloud()\r\n  return <ReactWordcloud  callbacks={callbacks}\r\n  options={options}\r\n  words={words} />\r\n}*/\n\n\n_c2 = Datacloud;\nexport default Service2_1;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Service2_1\");\n$RefreshReg$(_c2, \"Datacloud\");","map":{"version":3,"sources":["C:/Users/dofla/Desktop/Stage/propaganda/src/pages/service2_1.js"],"names":["React","data","Button","Multiplechkbox","Link","WordCloud","Cloud","word","text","value","fontSizeMapper","Math","log2","Service2_1","console","log","Datacloud","propagandas","spans","res","tailleSpan","i","article701225819","j","label","spanCourant","span","probability","push","v","length","substring","start_char","end_index","JSON","stringify","l","Array"],"mappings":"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","sourcesContent":["import React from 'react';\r\n//import {Reponse} from '../components/textInput'\r\nimport data from \"../json/jsonmockV4.json\"\r\nimport Button from '../components/button';\r\nimport Multiplechkbox from '../components/MultipleChkbox';\r\nimport {Link} from \"react-router-dom\";\r\nimport WordCloud from 'react-d3-cloud';\r\nimport Cloud from 'react-wordcloud';\r\n\r\nimport \"tippy.js/dist/tippy.css\";\r\nimport \"tippy.js/animations/scale.css\";\r\n\r\n\r\nlet word = [\r\n  { text: 'Hey', value: 1000},\r\n  { text: 'lol', value: 200 },\r\n  { text: 'first impression', value: 800 },\r\n  { text: 'very cool', value: 1000000 },\r\n  { text: 'duck', value: 10 },\r\n];\r\nconst fontSizeMapper = word => Math.log2(word.value) * 5;\r\n//const rotate = word => word.value % 360;\r\n\r\nconst Service2_1 = () => {\r\n    return (\r\n      <div>\r\n        {console.log(word)}\r\n<WordCloud\r\n    data={word}\r\n    fontSizeMapper={fontSizeMapper}\r\n    \r\n   // rotate={rotate}\r\n  />  </div>  );\r\n  };\r\n  \r\n \r\nfunction Datacloud(){\r\n  let propagandas=[\"Appeal_to_Authority\",\"Appeal_to_fear-prejudice\",\"Bandwagon,Reductio_ad_hitlerum\",\"Black-and-White_Fallacy\",\"Causal_Oversimplification\",\"Doubt\",\"Exaggeration,Minimisation\",\"Flag-Waving\",\"Loaded_Language\",\"Name_Calling,Labeling\",\"Repetition\",\"Slogans\",\"Thought-terminating_Cliches\",\"Whataboutism,Straw_Men,Red_Herring\"]\r\n  let spans=[]\r\n  let res=[]\r\n // let taillePropaganda=0;\r\n  let tailleSpan=0;\r\n  let text=\"\"\r\n  for(let i in data.article701225819){\r\n\r\n    for(let j in data.article701225819[i]){\r\n        if(j!=='text'){\r\n\r\n        \r\n      /*console.log(\"type of \"+typeof(data.article701225819[i][j].label))\r\n      console.log(\"texte \"+data.article701225819[i][j].span)\r\n      console.log(\"i \"+i)\r\n      console.log(\"j \"+j+1)*/\r\n   \r\n      if(typeof(data.article701225819[i][j].label)!=='object'){\r\n       // console.log(\"test\")\r\n       if(data.article701225819[i][j].label!==0){\r\n        let spanCourant={};\r\n       spanCourant.text=data.article701225819[i][j].span;\r\n       spanCourant.value=data.article701225819[i][j].probability;\r\n       //spanCourant.label=data.article701225819[i][j].label;\r\n\r\n        spans.push(spanCourant)\r\n      }\r\n      }else{\r\n        for(let v=0;v<data.article701225819[i][j].label.length;v++){\r\n\r\n          let spanCourant={};\r\n          spanCourant.text=data.article701225819[i].text.substring(data.article701225819[i][j].start_char[v],data.article701225819[i][j].end_index[v]);\r\n          spanCourant.value=data.article701225819[i][j].probability[v];\r\n          //spanCourant.label=data.article701225819[i][j].label[v];\r\n\r\n          spans.push(spanCourant)\r\n        \r\n          \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  }    \r\n   \r\n  for(let i=0;i<spans.length;i++){\r\n    console.log(\"SPANS \"+spans[i].span)\r\n\r\n  }\r\n  console.log(\"SPANS \"+spans)\r\n\r\n  console.log(\"SPANS \"+JSON.stringify(spans))\r\n  let l=JSON.stringify(spans);\r\nlet  word=JSON.Array(spans);\r\n\r\n  return word;\r\n // console.log(data.article701225819[propagandas[0]][\"span_1\"].probability);\r\n\r\n        \r\n  //console.log(data[0].span_1)\r\n}\r\n/*function SimpleWordcloud() {\r\n  const words = [\r\n    {\r\n      text: 'told',\r\n      value: 640,\r\n    },\r\n    {\r\n      text: 'mistake',\r\n      value: 700,\r\n    },\r\n    {\r\n      text: 'thought',\r\n      value: 890,\r\n    },\r\n    {\r\n      text: 'bad',\r\n      value: 1090,\r\n    },\r\n  ]\r\n  const callbacks = {\r\n    getWordColor: word => word.value > 50 ? \"blue\" : \"red\",\r\n    onWordClick: console.log,\r\n    onWordMouseOver: console.log,\r\n    getWordTooltip: word => `${word.text} (${word.value}) [${word.value > 50 ? \"good\" : \"bad\"}]`,\r\n  }\r\n  const options = {\r\n    rotations: 2,\r\n    rotationAngles: [-90, 0],\r\n  };\r\n  //const size = [600, 400];\r\n   \r\n  \r\n  //let words=Datacloud()\r\n  return <ReactWordcloud  callbacks={callbacks}\r\n  options={options}\r\n  words={words} />\r\n}*/\r\n\r\n \r\n\r\n \r\n  export default Service2_1;\r\n"]},"metadata":{},"sourceType":"module"}